(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (factory());
}(this, (function () { 'use strict';

  /**
   * Applies the :focus-visible polyfill at the given scope.
   * A scope in this case is either the top-level Document or a Shadow Root.
   *
   * @param {(Document|ShadowRoot)} scope
   * @see https://github.com/WICG/focus-visible
   */
  function applyFocusVisiblePolyfill(scope) {
    var hadKeyboardEvent = true;
    var hadFocusVisibleRecently = false;
    var hadFocusVisibleRecentlyTimeout = null;

    var inputTypesAllowlist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      'datetime-local': true
    };

    /**
     * Helper function for legacy browsers and iframes which sometimes focus
     * elements like document, body, and non-interactive SVG.
     * @param {Element} el
     */
    function isValidFocusTarget(el) {
      if (
        el &&
        el !== document &&
        el.nodeName !== 'HTML' &&
        el.nodeName !== 'BODY' &&
        'classList' in el &&
        'contains' in el.classList
      ) {
        return true;
      }
      return false;
    }

    /**
     * Computes whether the given element should automatically trigger the
     * `focus-visible` class being added, i.e. whether it should always match
     * `:focus-visible` when focused.
     * @param {Element} el
     * @return {boolean}
     */
    function focusTriggersKeyboardModality(el) {
      var type = el.type;
      var tagName = el.tagName;

      if (tagName === 'INPUT' && inputTypesAllowlist[type] && !el.readOnly) {
        return true;
      }

      if (tagName === 'TEXTAREA' && !el.readOnly) {
        return true;
      }

      if (el.isContentEditable) {
        return true;
      }

      return false;
    }

    /**
     * Add the `focus-visible` class to the given element if it was not added by
     * the author.
     * @param {Element} el
     */
    function addFocusVisibleClass(el) {
      if (el.classList.contains('focus-visible')) {
        return;
      }
      el.classList.add('focus-visible');
      el.setAttribute('data-focus-visible-added', '');
    }

    /**
     * Remove the `focus-visible` class from the given element if it was not
     * originally added by the author.
     * @param {Element} el
     */
    function removeFocusVisibleClass(el) {
      if (!el.hasAttribute('data-focus-visible-added')) {
        return;
      }
      el.classList.remove('focus-visible');
      el.removeAttribute('data-focus-visible-added');
    }

    /**
     * If the most recent user interaction was via the keyboard;
     * and the key press did not include a meta, alt/option, or control key;
     * then the modality is keyboard. Otherwise, the modality is not keyboard.
     * Apply `focus-visible` to any current active element and keep track
     * of our keyboard modality state with `hadKeyboardEvent`.
     * @param {KeyboardEvent} e
     */
    function onKeyDown(e) {
      if (e.metaKey || e.altKey || e.ctrlKey) {
        return;
      }

      if (isValidFocusTarget(scope.activeElement)) {
        addFocusVisibleClass(scope.activeElement);
      }

      hadKeyboardEvent = true;
    }

    /**
     * If at any point a user clicks with a pointing device, ensure that we change
     * the modality away from keyboard.
     * This avoids the situation where a user presses a key on an already focused
     * element, and then clicks on a different element, focusing it with a
     * pointing device, while we still think we're in keyboard modality.
     * @param {Event} e
     */
    function onPointerDown(e) {
      hadKeyboardEvent = false;
    }

    /**
     * On `focus`, add the `focus-visible` class to the target if:
     * - the target received focus as a result of keyboard navigation, or
     * - the event target is an element that will likely require interaction
     *   via the keyboard (e.g. a text box)
     * @param {Event} e
     */
    function onFocus(e) {
      // Prevent IE from focusing the document or HTML element.
      if (!isValidFocusTarget(e.target)) {
        return;
      }

      if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {
        addFocusVisibleClass(e.target);
      }
    }

    /**
     * On `blur`, remove the `focus-visible` class from the target.
     * @param {Event} e
     */
    function onBlur(e) {
      if (!isValidFocusTarget(e.target)) {
        return;
      }

      if (
        e.target.classList.contains('focus-visible') ||
        e.target.hasAttribute('data-focus-visible-added')
      ) {
        // To detect a tab/window switch, we look for a blur event followed
        // rapidly by a visibility change.
        // If we don't see a visibility change within 100ms, it's probably a
        // regular focus change.
        hadFocusVisibleRecently = true;
        window.clearTimeout(hadFocusVisibleRecentlyTimeout);
        hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {
          hadFocusVisibleRecently = false;
        }, 100);
        removeFocusVisibleClass(e.target);
      }
    }

    /**
     * If the user changes tabs, keep track of whether or not the previously
     * focused element had .focus-visible.
     * @param {Event} e
     */
    function onVisibilityChange(e) {
      if (document.visibilityState === 'hidden') {
        // If the tab becomes active again, the browser will handle calling focus
        // on the element (Safari actually calls it twice).
        // If this tab change caused a blur on an element with focus-visible,
        // re-apply the class when the user switches back to the tab.
        if (hadFocusVisibleRecently) {
          hadKeyboardEvent = true;
        }
        addInitialPointerMoveListeners();
      }
    }

    /**
     * Add a group of listeners to detect usage of any pointing devices.
     * These listeners will be added when the polyfill first loads, and anytime
     * the window is blurred, so that they are active when the window regains
     * focus.
     */
    function addInitialPointerMoveListeners() {
      document.addEventListener('mousemove', onInitialPointerMove);
      document.addEventListener('mousedown', onInitialPointerMove);
      document.addEventListener('mouseup', onInitialPointerMove);
      document.addEventListener('pointermove', onInitialPointerMove);
      document.addEventListener('pointerdown', onInitialPointerMove);
      document.addEventListener('pointerup', onInitialPointerMove);
      document.addEventListener('touchmove', onInitialPointerMove);
      document.addEventListener('touchstart', onInitialPointerMove);
      document.addEventListener('touchend', onInitialPointerMove);
    }

    function removeInitialPointerMoveListeners() {
      document.removeEventListener('mousemove', onInitialPointerMove);
      document.removeEventListener('mousedown', onInitialPointerMove);
      document.removeEventListener('mouseup', onInitialPointerMove);
      document.removeEventListener('pointermove', onInitialPointerMove);
      document.removeEventListener('pointerdown', onInitialPointerMove);
      document.removeEventListener('pointerup', onInitialPointerMove);
      document.removeEventListener('touchmove', onInitialPointerMove);
      document.removeEventListener('touchstart', onInitialPointerMove);
      document.removeEventListener('touchend', onInitialPointerMove);
    }

    /**
     * When the polfyill first loads, assume the user is in keyboard modality.
     * If any event is received from a pointing device (e.g. mouse, pointer,
     * touch), turn off keyboard modality.
     * This accounts for situations where focus enters the page from the URL bar.
     * @param {Event} e
     */
    function onInitialPointerMove(e) {
      // Work around a Safari quirk that fires a mousemove on <html> whenever the
      // window blurs, even if you're tabbing out of the page. ¯\_(ツ)_/¯
      if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {
        return;
      }

      hadKeyboardEvent = false;
      removeInitialPointerMoveListeners();
    }

    // For some kinds of state, we are interested in changes at the global scope
    // only. For example, global pointer input, global key presses and global
    // visibility change should affect the state at every scope:
    document.addEventListener('keydown', onKeyDown, true);
    document.addEventListener('mousedown', onPointerDown, true);
    document.addEventListener('pointerdown', onPointerDown, true);
    document.addEventListener('touchstart', onPointerDown, true);
    document.addEventListener('visibilitychange', onVisibilityChange, true);

    addInitialPointerMoveListeners();

    // For focus and blur, we specifically care about state changes in the local
    // scope. This is because focus / blur events that originate from within a
    // shadow root are not re-dispatched from the host element if it was already
    // the active element in its own scope:
    scope.addEventListener('focus', onFocus, true);
    scope.addEventListener('blur', onBlur, true);

    // We detect that a node is a ShadowRoot by ensuring that it is a
    // DocumentFragment and also has a host property. This check covers native
    // implementation and polyfill implementation transparently. If we only cared
    // about the native implementation, we could just check if the scope was
    // an instance of a ShadowRoot.
    if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {
      // Since a ShadowRoot is a special kind of DocumentFragment, it does not
      // have a root element to add a class to. So, we add this attribute to the
      // host element instead:
      scope.host.setAttribute('data-js-focus-visible', '');
    } else if (scope.nodeType === Node.DOCUMENT_NODE) {
      document.documentElement.classList.add('js-focus-visible');
      document.documentElement.setAttribute('data-js-focus-visible', '');
    }
  }

  // It is important to wrap all references to global window and document in
  // these checks to support server-side rendering use cases
  // @see https://github.com/WICG/focus-visible/issues/199
  if (typeof window !== 'undefined' && typeof document !== 'undefined') {
    // Make the polyfill helper globally available. This can be used as a signal
    // to interested libraries that wish to coordinate with the polyfill for e.g.,
    // applying the polyfill to a shadow root:
    window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill;

    // Notify interested libraries of the polyfill's presence, in case the
    // polyfill was loaded lazily:
    var event;

    try {
      event = new CustomEvent('focus-visible-polyfill-ready');
    } catch (error) {
      // IE11 does not support using CustomEvent as a constructor directly:
      event = document.createEvent('CustomEvent');
      event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});
    }

    window.dispatchEvent(event);
  }

  if (typeof document !== 'undefined') {
    // Apply the polyfill to the global document, so that no JavaScript
    // coordination is required to use the polyfill in the top-level document:
    applyFocusVisiblePolyfill(document);
  }

})));

},{}],2:[function(require,module,exports){
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(t="undefined"!=typeof globalThis?globalThis:t||self).LazyLoad=n()}(this,(function(){"use strict";function t(){return(t=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])}return t}).apply(this,arguments)}var n="undefined"!=typeof window,e=n&&!("onscroll"in window)||"undefined"!=typeof navigator&&/(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent),i=n&&"IntersectionObserver"in window,o=n&&"classList"in document.createElement("p"),r=n&&window.devicePixelRatio>1,a={elements_selector:".lazy",container:e||n?document:null,threshold:300,thresholds:null,data_src:"src",data_srcset:"srcset",data_sizes:"sizes",data_bg:"bg",data_bg_hidpi:"bg-hidpi",data_bg_multi:"bg-multi",data_bg_multi_hidpi:"bg-multi-hidpi",data_poster:"poster",class_applied:"applied",class_loading:"loading",class_loaded:"loaded",class_error:"error",class_entered:"entered",class_exited:"exited",unobserve_completed:!0,unobserve_entered:!1,cancel_on_exit:!0,callback_enter:null,callback_exit:null,callback_applied:null,callback_loading:null,callback_loaded:null,callback_error:null,callback_finish:null,callback_cancel:null,use_native:!1},c=function(n){return t({},a,n)},s=function(t,n){var e,i="LazyLoad::Initialized",o=new t(n);try{e=new CustomEvent(i,{detail:{instance:o}})}catch(t){(e=document.createEvent("CustomEvent")).initCustomEvent(i,!1,!1,{instance:o})}window.dispatchEvent(e)},l="loading",u="loaded",d="applied",f="error",_="native",g="data-",v="ll-status",b=function(t,n){return t.getAttribute(g+n)},p=function(t){return b(t,v)},h=function(t,n){return function(t,n,e){var i="data-ll-status";null!==e?t.setAttribute(i,e):t.removeAttribute(i)}(t,0,n)},m=function(t){return h(t,null)},E=function(t){return null===p(t)},y=function(t){return p(t)===_},I=[l,u,d,f],A=function(t,n,e,i){t&&(void 0===i?void 0===e?t(n):t(n,e):t(n,e,i))},L=function(t,n){o?t.classList.add(n):t.className+=(t.className?" ":"")+n},w=function(t,n){o?t.classList.remove(n):t.className=t.className.replace(new RegExp("(^|\\s+)"+n+"(\\s+|$)")," ").replace(/^\s+/,"").replace(/\s+$/,"")},k=function(t){return t.llTempImage},O=function(t,n){if(n){var e=n._observer;e&&e.unobserve(t)}},x=function(t,n){t&&(t.loadingCount+=n)},z=function(t,n){t&&(t.toLoadCount=n)},C=function(t){for(var n,e=[],i=0;n=t.children[i];i+=1)"SOURCE"===n.tagName&&e.push(n);return e},N=function(t,n,e){e&&t.setAttribute(n,e)},M=function(t,n){t.removeAttribute(n)},R=function(t){return!!t.llOriginalAttrs},T=function(t){if(!R(t)){var n={};n.src=t.getAttribute("src"),n.srcset=t.getAttribute("srcset"),n.sizes=t.getAttribute("sizes"),t.llOriginalAttrs=n}},G=function(t){if(R(t)){var n=t.llOriginalAttrs;N(t,"src",n.src),N(t,"srcset",n.srcset),N(t,"sizes",n.sizes)}},D=function(t,n){N(t,"sizes",b(t,n.data_sizes)),N(t,"srcset",b(t,n.data_srcset)),N(t,"src",b(t,n.data_src))},V=function(t){M(t,"src"),M(t,"srcset"),M(t,"sizes")},j=function(t,n){var e=t.parentNode;e&&"PICTURE"===e.tagName&&C(e).forEach(n)},F={IMG:function(t,n){j(t,(function(t){T(t),D(t,n)})),T(t),D(t,n)},IFRAME:function(t,n){N(t,"src",b(t,n.data_src))},VIDEO:function(t,n){!function(t,e){C(t).forEach((function(t){N(t,"src",b(t,n.data_src))}))}(t),N(t,"poster",b(t,n.data_poster)),N(t,"src",b(t,n.data_src)),t.load()}},P=function(t,n){var e=F[t.tagName];e&&e(t,n)},S=function(t,n,e){x(e,1),L(t,n.class_loading),h(t,l),A(n.callback_loading,t,e)},U=["IMG","IFRAME","VIDEO"],$=function(t,n){!n||function(t){return t.loadingCount>0}(n)||function(t){return t.toLoadCount>0}(n)||A(t.callback_finish,n)},q=function(t,n,e){t.addEventListener(n,e),t.llEvLisnrs[n]=e},H=function(t,n,e){t.removeEventListener(n,e)},B=function(t){return!!t.llEvLisnrs},J=function(t){if(B(t)){var n=t.llEvLisnrs;for(var e in n){var i=n[e];H(t,e,i)}delete t.llEvLisnrs}},K=function(t,n,e){!function(t){delete t.llTempImage}(t),x(e,-1),function(t){t&&(t.toLoadCount-=1)}(e),w(t,n.class_loading),n.unobserve_completed&&O(t,e)},Q=function(t,n,e){var i=k(t)||t;B(i)||function(t,n,e){B(t)||(t.llEvLisnrs={});var i="VIDEO"===t.tagName?"loadeddata":"load";q(t,i,n),q(t,"error",e)}(i,(function(o){!function(t,n,e,i){var o=y(n);K(n,e,i),L(n,e.class_loaded),h(n,u),A(e.callback_loaded,n,i),o||$(e,i)}(0,t,n,e),J(i)}),(function(o){!function(t,n,e,i){var o=y(n);K(n,e,i),L(n,e.class_error),h(n,f),A(e.callback_error,n,i),o||$(e,i)}(0,t,n,e),J(i)}))},W=function(t,n,e){!function(t){t.llTempImage=document.createElement("IMG")}(t),Q(t,n,e),function(t,n,e){var i=b(t,n.data_bg),o=b(t,n.data_bg_hidpi),a=r&&o?o:i;a&&(t.style.backgroundImage='url("'.concat(a,'")'),k(t).setAttribute("src",a),S(t,n,e))}(t,n,e),function(t,n,e){var i=b(t,n.data_bg_multi),o=b(t,n.data_bg_multi_hidpi),a=r&&o?o:i;a&&(t.style.backgroundImage=a,function(t,n,e){L(t,n.class_applied),h(t,d),n.unobserve_completed&&O(t,n),A(n.callback_applied,t,e)}(t,n,e))}(t,n,e)},X=function(t,n,e){!function(t){return U.indexOf(t.tagName)>-1}(t)?W(t,n,e):function(t,n,e){Q(t,n,e),P(t,n),S(t,n,e)}(t,n,e)},Y=["IMG","IFRAME","VIDEO"],Z=function(t){return t.use_native&&"loading"in HTMLImageElement.prototype},tt=function(t,n,e){t.forEach((function(t){return function(t){return t.isIntersecting||t.intersectionRatio>0}(t)?function(t,n,e,i){var o=function(t){return I.indexOf(p(t))>=0}(t);h(t,"entered"),L(t,e.class_entered),w(t,e.class_exited),function(t,n,e){n.unobserve_entered&&O(t,e)}(t,e,i),A(e.callback_enter,t,n,i),o||X(t,e,i)}(t.target,t,n,e):function(t,n,e,i){E(t)||(L(t,e.class_exited),function(t,n,e,i){e.cancel_on_exit&&function(t){return p(t)===l}(t)&&"IMG"===t.tagName&&(J(t),function(t){j(t,(function(t){V(t)})),V(t)}(t),function(t){j(t,(function(t){G(t)})),G(t)}(t),w(t,e.class_loading),x(i,-1),m(t),A(e.callback_cancel,t,n,i))}(t,n,e,i),A(e.callback_exit,t,n,i))}(t.target,t,n,e)}))},nt=function(t){return Array.prototype.slice.call(t)},et=function(t){return t.container.querySelectorAll(t.elements_selector)},it=function(t){return function(t){return p(t)===f}(t)},ot=function(t,n){return function(t){return nt(t).filter(E)}(t||et(n))},rt=function(t,e){var o=c(t);this._settings=o,this.loadingCount=0,function(t,n){i&&!Z(t)&&(n._observer=new IntersectionObserver((function(e){tt(e,t,n)}),function(t){return{root:t.container===document?null:t.container,rootMargin:t.thresholds||t.threshold+"px"}}(t)))}(o,this),function(t,e){n&&window.addEventListener("online",(function(){!function(t,n){var e;(e=et(t),nt(e).filter(it)).forEach((function(n){w(n,t.class_error),m(n)})),n.update()}(t,e)}))}(o,this),this.update(e)};return rt.prototype={update:function(t){var n,o,r=this._settings,a=ot(t,r);z(this,a.length),!e&&i?Z(r)?function(t,n,e){t.forEach((function(t){-1!==Y.indexOf(t.tagName)&&function(t,n,e){t.setAttribute("loading","lazy"),Q(t,n,e),P(t,n),h(t,_)}(t,n,e)})),z(e,0)}(a,r,this):(o=a,function(t){t.disconnect()}(n=this._observer),function(t,n){n.forEach((function(n){t.observe(n)}))}(n,o)):this.loadAll(a)},destroy:function(){this._observer&&this._observer.disconnect(),et(this._settings).forEach((function(t){delete t.llOriginalAttrs})),delete this._observer,delete this._settings,delete this.loadingCount,delete this.toLoadCount},loadAll:function(t){var n=this,e=this._settings;ot(t,e).forEach((function(t){O(t,n),X(t,e,n)}))}},rt.load=function(t,n){var e=c(n);X(t,e)},rt.resetStatus=function(t){m(t)},n&&function(t,n){if(n)if(n.length)for(var e,i=0;e=n[i];i+=1)s(t,e);else s(t,n)}(rt,window.lazyLoadOptions),rt}));

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = () => {
  const elem = document.createElement('canvas');

  if (elem.getContext && elem.getContext('2d')) {
    return elem.toDataURL('image/webp').indexOf('data:image/webp') === 0;
  }

  return false;
};

exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = fn => {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', fn);
  } else {
    fn();
  }
};

exports.default = _default;

},{}],5:[function(require,module,exports){
"use strict";

require("focus-visible");

var _lazyImages = _interopRequireDefault(require("./modules/lazyImages"));

var _documentReady = _interopRequireDefault(require("./helpers/documentReady"));

require("./menucross");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _documentReady.default)(() => {
  (0, _lazyImages.default)();
});
ScrollReveal().reveal(".headline1", {
  delay: 400,
  distance: "50px"
});
ScrollReveal().reveal(".headline2", {
  delay: 500,
  distance: "50px"
});
ScrollReveal().reveal(".headline3", {
  delay: 600,
  distance: "50px"
});
ScrollReveal().reveal(".headline4", {
  delay: 700,
  distance: "50px"
});
ScrollReveal().reveal(".headline5", {
  delay: 800,
  distance: "50px"
});
ScrollReveal().reveal(".headline6", {
  delay: 900,
  distance: "50px"
});
const trigger = document.querySelector(".burger"); // or whatever triggers the toggle

const element = document.querySelector(".nav-menu ");
const body = document.querySelector("body");
console.log(trigger);
trigger.addEventListener("click", function (e) {
  e.preventDefault();
  element.classList.toggle("active"); // or whatever your active class is

  body.classList.toggle("active"); // or whatever your active class is
});
const refs = {
  openModalBtn: document.querySelector("[data-open-modal]"),
  closeModalBtn: document.querySelector("[data-close-modal]"),
  backdrop: document.querySelector("[data-backdrop]")
};
refs.openModalBtn.addEventListener("click", toggleModal);
refs.closeModalBtn.addEventListener("click", toggleModal);
refs.backdrop.addEventListener("click", logBackdropClick);

function toggleModal() {
  refs.backdrop.classList.toggle("is-hidden");
}

function logBackdropClick() {}

},{"./helpers/documentReady":4,"./menucross":6,"./modules/lazyImages":7,"focus-visible":1}],6:[function(require,module,exports){
"use strict";

const trigger = document.querySelector(".burger"); // or whatever triggers the toggle

const element = document.querySelector(".menu ");
const body = document.querySelector(".page-home");
console.log(trigger);
trigger.addEventListener("click", function (e) {
  e.preventDefault();
  element.classList.toggle("active"); // or whatever your active class is

  body.classList.toggle("sidebar-is-open"); // or whatever your active class is
});

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vanillaLazyload = _interopRequireDefault(require("vanilla-lazyload"));

var _canUseWebp = _interopRequireDefault(require("../helpers/canUseWebp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = () => {
  if ((0, _canUseWebp.default)() === false) {
    const lazyBgItems = document.querySelectorAll('.lazy[data-bg-fallback]');
    lazyBgItems.forEach(item => {
      const srcBgFallback = item.getAttribute('data-bg-fallback');
      item.setAttribute('data-bg', srcBgFallback);
    });
  } // eslint-disable-next-line no-unused-vars


  const lazyLoadInstance = new _vanillaLazyload.default({
    elements_selector: '.lazy'
  });
};

exports.default = _default;

},{"../helpers/canUseWebp":3,"vanilla-lazyload":2}]},{},[5])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZm9jdXMtdmlzaWJsZS9kaXN0L2ZvY3VzLXZpc2libGUuanMiLCJub2RlX21vZHVsZXMvdmFuaWxsYS1sYXp5bG9hZC9kaXN0L2xhenlsb2FkLm1pbi5qcyIsInNyYy9qcy9oZWxwZXJzL2NhblVzZVdlYnAuanMiLCJzcmMvanMvaGVscGVycy9kb2N1bWVudFJlYWR5LmpzIiwic3JjL2pzL21haW4uanMiLCJzcmMvanMvbWVudWNyb3NzLmpzIiwic3JjL2pzL21vZHVsZXMvbGF6eUltYWdlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hUQTtBQUNBOzs7Ozs7Ozs7ZUNEZSxNQUFNO0FBQ25CLFFBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLFFBQXZCLENBQWI7O0FBQ0EsTUFBSSxJQUFJLENBQUMsVUFBTCxJQUFtQixJQUFJLENBQUMsVUFBTCxDQUFnQixJQUFoQixDQUF2QixFQUE4QztBQUM1QyxXQUFPLElBQUksQ0FBQyxTQUFMLENBQWUsWUFBZixFQUE2QixPQUE3QixDQUFxQyxpQkFBckMsTUFBNEQsQ0FBbkU7QUFDRDs7QUFDRCxTQUFPLEtBQVA7QUFDRCxDOzs7Ozs7Ozs7Ozs7ZUNOZSxFQUFELElBQVE7QUFDckIsTUFBSSxRQUFRLENBQUMsVUFBVCxLQUF3QixTQUE1QixFQUF1QztBQUNyQyxJQUFBLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsRUFBOUM7QUFDRCxHQUZELE1BRU87QUFDTCxJQUFBLEVBQUU7QUFDSDtBQUNGLEM7Ozs7Ozs7QUNORDs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLDRCQUFjLE1BQU07QUFDbkI7QUFDQSxDQUZEO0FBR0EsWUFBWSxHQUFHLE1BQWYsQ0FBc0IsWUFBdEIsRUFBb0M7QUFBRSxFQUFBLEtBQUssRUFBRSxHQUFUO0FBQWMsRUFBQSxRQUFRLEVBQUU7QUFBeEIsQ0FBcEM7QUFDQSxZQUFZLEdBQUcsTUFBZixDQUFzQixZQUF0QixFQUFvQztBQUFFLEVBQUEsS0FBSyxFQUFFLEdBQVQ7QUFBYyxFQUFBLFFBQVEsRUFBRTtBQUF4QixDQUFwQztBQUNBLFlBQVksR0FBRyxNQUFmLENBQXNCLFlBQXRCLEVBQW9DO0FBQUUsRUFBQSxLQUFLLEVBQUUsR0FBVDtBQUFjLEVBQUEsUUFBUSxFQUFFO0FBQXhCLENBQXBDO0FBQ0EsWUFBWSxHQUFHLE1BQWYsQ0FBc0IsWUFBdEIsRUFBb0M7QUFBRSxFQUFBLEtBQUssRUFBRSxHQUFUO0FBQWMsRUFBQSxRQUFRLEVBQUU7QUFBeEIsQ0FBcEM7QUFDQSxZQUFZLEdBQUcsTUFBZixDQUFzQixZQUF0QixFQUFvQztBQUFFLEVBQUEsS0FBSyxFQUFFLEdBQVQ7QUFBYyxFQUFBLFFBQVEsRUFBRTtBQUF4QixDQUFwQztBQUNBLFlBQVksR0FBRyxNQUFmLENBQXNCLFlBQXRCLEVBQW9DO0FBQUUsRUFBQSxLQUFLLEVBQUUsR0FBVDtBQUFjLEVBQUEsUUFBUSxFQUFFO0FBQXhCLENBQXBDO0FBRUEsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsU0FBdkIsQ0FBaEIsQyxDQUFtRDs7QUFDbkQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsWUFBdkIsQ0FBaEI7QUFDQSxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixNQUF2QixDQUFiO0FBRUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxPQUFaO0FBRUEsT0FBTyxDQUFDLGdCQUFSLENBQXlCLE9BQXpCLEVBQWtDLFVBQVUsQ0FBVixFQUFhO0FBQzlDLEVBQUEsQ0FBQyxDQUFDLGNBQUY7QUFDQSxFQUFBLE9BQU8sQ0FBQyxTQUFSLENBQWtCLE1BQWxCLENBQXlCLFFBQXpCLEVBRjhDLENBRVY7O0FBQ3BDLEVBQUEsSUFBSSxDQUFDLFNBQUwsQ0FBZSxNQUFmLENBQXNCLFFBQXRCLEVBSDhDLENBR2I7QUFDakMsQ0FKRDtBQU1BLE1BQU0sSUFBSSxHQUFHO0FBQ1osRUFBQSxZQUFZLEVBQUUsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsbUJBQXZCLENBREY7QUFFWixFQUFBLGFBQWEsRUFBRSxRQUFRLENBQUMsYUFBVCxDQUF1QixvQkFBdkIsQ0FGSDtBQUdaLEVBQUEsUUFBUSxFQUFFLFFBQVEsQ0FBQyxhQUFULENBQXVCLGlCQUF2QjtBQUhFLENBQWI7QUFNQSxJQUFJLENBQUMsWUFBTCxDQUFrQixnQkFBbEIsQ0FBbUMsT0FBbkMsRUFBNEMsV0FBNUM7QUFDQSxJQUFJLENBQUMsYUFBTCxDQUFtQixnQkFBbkIsQ0FBb0MsT0FBcEMsRUFBNkMsV0FBN0M7QUFFQSxJQUFJLENBQUMsUUFBTCxDQUFjLGdCQUFkLENBQStCLE9BQS9CLEVBQXdDLGdCQUF4Qzs7QUFFQSxTQUFTLFdBQVQsR0FBdUI7QUFDdEIsRUFBQSxJQUFJLENBQUMsUUFBTCxDQUFjLFNBQWQsQ0FBd0IsTUFBeEIsQ0FBK0IsV0FBL0I7QUFDQTs7QUFFRCxTQUFTLGdCQUFULEdBQTRCLENBQUU7Ozs7O0FDMUM5QixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixTQUF2QixDQUFoQixDLENBQW1EOztBQUNuRCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixRQUF2QixDQUFoQjtBQUNBLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLFlBQXZCLENBQWI7QUFFQSxPQUFPLENBQUMsR0FBUixDQUFZLE9BQVo7QUFFQSxPQUFPLENBQUMsZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0MsVUFBVSxDQUFWLEVBQWE7QUFDOUMsRUFBQSxDQUFDLENBQUMsY0FBRjtBQUNBLEVBQUEsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsTUFBbEIsQ0FBeUIsUUFBekIsRUFGOEMsQ0FFVjs7QUFDcEMsRUFBQSxJQUFJLENBQUMsU0FBTCxDQUFlLE1BQWYsQ0FBc0IsaUJBQXRCLEVBSDhDLENBR0o7QUFDMUMsQ0FKRDs7Ozs7Ozs7OztBQ05BOztBQUNBOzs7O2VBRWUsTUFBTTtBQUNuQixNQUFJLCtCQUFpQixLQUFyQixFQUE0QjtBQUMxQixVQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIseUJBQTFCLENBQXBCO0FBRUEsSUFBQSxXQUFXLENBQUMsT0FBWixDQUFxQixJQUFELElBQVU7QUFDNUIsWUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQUwsQ0FBa0Isa0JBQWxCLENBQXRCO0FBQ0EsTUFBQSxJQUFJLENBQUMsWUFBTCxDQUFrQixTQUFsQixFQUE2QixhQUE3QjtBQUNELEtBSEQ7QUFJRCxHQVJrQixDQVVuQjs7O0FBQ0EsUUFBTSxnQkFBZ0IsR0FBRyxJQUFJLHdCQUFKLENBQWE7QUFDcEMsSUFBQSxpQkFBaUIsRUFBRTtBQURpQixHQUFiLENBQXpCO0FBR0QsQyIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSA6Zm9jdXMtdmlzaWJsZSBwb2x5ZmlsbCBhdCB0aGUgZ2l2ZW4gc2NvcGUuXG4gICAqIEEgc2NvcGUgaW4gdGhpcyBjYXNlIGlzIGVpdGhlciB0aGUgdG9wLWxldmVsIERvY3VtZW50IG9yIGEgU2hhZG93IFJvb3QuXG4gICAqXG4gICAqIEBwYXJhbSB7KERvY3VtZW50fFNoYWRvd1Jvb3QpfSBzY29wZVxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGVcbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5Rm9jdXNWaXNpYmxlUG9seWZpbGwoc2NvcGUpIHtcbiAgICB2YXIgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgdmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgdmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IG51bGw7XG5cbiAgICB2YXIgaW5wdXRUeXBlc0FsbG93bGlzdCA9IHtcbiAgICAgIHRleHQ6IHRydWUsXG4gICAgICBzZWFyY2g6IHRydWUsXG4gICAgICB1cmw6IHRydWUsXG4gICAgICB0ZWw6IHRydWUsXG4gICAgICBlbWFpbDogdHJ1ZSxcbiAgICAgIHBhc3N3b3JkOiB0cnVlLFxuICAgICAgbnVtYmVyOiB0cnVlLFxuICAgICAgZGF0ZTogdHJ1ZSxcbiAgICAgIG1vbnRoOiB0cnVlLFxuICAgICAgd2VlazogdHJ1ZSxcbiAgICAgIHRpbWU6IHRydWUsXG4gICAgICBkYXRldGltZTogdHJ1ZSxcbiAgICAgICdkYXRldGltZS1sb2NhbCc6IHRydWVcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIGZvciBsZWdhY3kgYnJvd3NlcnMgYW5kIGlmcmFtZXMgd2hpY2ggc29tZXRpbWVzIGZvY3VzXG4gICAgICogZWxlbWVudHMgbGlrZSBkb2N1bWVudCwgYm9keSwgYW5kIG5vbi1pbnRlcmFjdGl2ZSBTVkcuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVmFsaWRGb2N1c1RhcmdldChlbCkge1xuICAgICAgaWYgKFxuICAgICAgICBlbCAmJlxuICAgICAgICBlbCAhPT0gZG9jdW1lbnQgJiZcbiAgICAgICAgZWwubm9kZU5hbWUgIT09ICdIVE1MJyAmJlxuICAgICAgICBlbC5ub2RlTmFtZSAhPT0gJ0JPRFknICYmXG4gICAgICAgICdjbGFzc0xpc3QnIGluIGVsICYmXG4gICAgICAgICdjb250YWlucycgaW4gZWwuY2xhc3NMaXN0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZVxuICAgICAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAgICAgKiBgOmZvY3VzLXZpc2libGVgIHdoZW4gZm9jdXNlZC5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShlbCkge1xuICAgICAgdmFyIHR5cGUgPSBlbC50eXBlO1xuICAgICAgdmFyIHRhZ05hbWUgPSBlbC50YWdOYW1lO1xuXG4gICAgICBpZiAodGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzQWxsb3dsaXN0W3R5cGVdICYmICFlbC5yZWFkT25seSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYgIWVsLnJlYWRPbmx5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byB0aGUgZ2l2ZW4gZWxlbWVudCBpZiBpdCB3YXMgbm90IGFkZGVkIGJ5XG4gICAgICogdGhlIGF1dGhvci5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkRm9jdXNWaXNpYmxlQ2xhc3MoZWwpIHtcbiAgICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZvY3VzLXZpc2libGUnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKCdmb2N1cy12aXNpYmxlJyk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcsICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBmcm9tIHRoZSBnaXZlbiBlbGVtZW50IGlmIGl0IHdhcyBub3RcbiAgICAgKiBvcmlnaW5hbGx5IGFkZGVkIGJ5IHRoZSBhdXRob3IuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZUZvY3VzVmlzaWJsZUNsYXNzKGVsKSB7XG4gICAgICBpZiAoIWVsLmhhc0F0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMtdmlzaWJsZScpO1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgbW9zdCByZWNlbnQgdXNlciBpbnRlcmFjdGlvbiB3YXMgdmlhIHRoZSBrZXlib2FyZDtcbiAgICAgKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAgICAgKiB0aGVuIHRoZSBtb2RhbGl0eSBpcyBrZXlib2FyZC4gT3RoZXJ3aXNlLCB0aGUgbW9kYWxpdHkgaXMgbm90IGtleWJvYXJkLlxuICAgICAqIEFwcGx5IGBmb2N1cy12aXNpYmxlYCB0byBhbnkgY3VycmVudCBhY3RpdmUgZWxlbWVudCBhbmQga2VlcCB0cmFja1xuICAgICAqIG9mIG91ciBrZXlib2FyZCBtb2RhbGl0eSBzdGF0ZSB3aXRoIGBoYWRLZXlib2FyZEV2ZW50YC5cbiAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbktleURvd24oZSkge1xuICAgICAgaWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNWYWxpZEZvY3VzVGFyZ2V0KHNjb3BlLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIGFkZEZvY3VzVmlzaWJsZUNsYXNzKHNjb3BlLmFjdGl2ZUVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiBhdCBhbnkgcG9pbnQgYSB1c2VyIGNsaWNrcyB3aXRoIGEgcG9pbnRpbmcgZGV2aWNlLCBlbnN1cmUgdGhhdCB3ZSBjaGFuZ2VcbiAgICAgKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICAgICAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gICAgICogZWxlbWVudCwgYW5kIHRoZW4gY2xpY2tzIG9uIGEgZGlmZmVyZW50IGVsZW1lbnQsIGZvY3VzaW5nIGl0IHdpdGggYVxuICAgICAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uUG9pbnRlckRvd24oZSkge1xuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIGBmb2N1c2AsIGFkZCB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIHRvIHRoZSB0YXJnZXQgaWY6XG4gICAgICogLSB0aGUgdGFyZ2V0IHJlY2VpdmVkIGZvY3VzIGFzIGEgcmVzdWx0IG9mIGtleWJvYXJkIG5hdmlnYXRpb24sIG9yXG4gICAgICogLSB0aGUgZXZlbnQgdGFyZ2V0IGlzIGFuIGVsZW1lbnQgdGhhdCB3aWxsIGxpa2VseSByZXF1aXJlIGludGVyYWN0aW9uXG4gICAgICogICB2aWEgdGhlIGtleWJvYXJkIChlLmcuIGEgdGV4dCBib3gpXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uRm9jdXMoZSkge1xuICAgICAgLy8gUHJldmVudCBJRSBmcm9tIGZvY3VzaW5nIHRoZSBkb2N1bWVudCBvciBIVE1MIGVsZW1lbnQuXG4gICAgICBpZiAoIWlzVmFsaWRGb2N1c1RhcmdldChlLnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFkS2V5Ym9hcmRFdmVudCB8fCBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShlLnRhcmdldCkpIHtcbiAgICAgICAgYWRkRm9jdXNWaXNpYmxlQ2xhc3MoZS50YXJnZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIGBibHVyYCwgcmVtb3ZlIHRoZSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgZnJvbSB0aGUgdGFyZ2V0LlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbkJsdXIoZSkge1xuICAgICAgaWYgKCFpc1ZhbGlkRm9jdXNUYXJnZXQoZS50YXJnZXQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZvY3VzLXZpc2libGUnKSB8fFxuICAgICAgICBlLnRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcpXG4gICAgICApIHtcbiAgICAgICAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAgICAgICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gICAgICAgIC8vIElmIHdlIGRvbid0IHNlZSBhIHZpc2liaWxpdHkgY2hhbmdlIHdpdGhpbiAxMDBtcywgaXQncyBwcm9iYWJseSBhXG4gICAgICAgIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0KTtcbiAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgcmVtb3ZlRm9jdXNWaXNpYmxlQ2xhc3MoZS50YXJnZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHRoZSB1c2VyIGNoYW5nZXMgdGFicywga2VlcCB0cmFjayBvZiB3aGV0aGVyIG9yIG5vdCB0aGUgcHJldmlvdXNseVxuICAgICAqIGZvY3VzZWQgZWxlbWVudCBoYWQgLmZvY3VzLXZpc2libGUuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uVmlzaWJpbGl0eUNoYW5nZShlKSB7XG4gICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgICAgICAvLyBJZiB0aGUgdGFiIGJlY29tZXMgYWN0aXZlIGFnYWluLCB0aGUgYnJvd3NlciB3aWxsIGhhbmRsZSBjYWxsaW5nIGZvY3VzXG4gICAgICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgICAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAgICAgLy8gcmUtYXBwbHkgdGhlIGNsYXNzIHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgYmFjayB0byB0aGUgdGFiLlxuICAgICAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBncm91cCBvZiBsaXN0ZW5lcnMgdG8gZGV0ZWN0IHVzYWdlIG9mIGFueSBwb2ludGluZyBkZXZpY2VzLlxuICAgICAqIFRoZXNlIGxpc3RlbmVycyB3aWxsIGJlIGFkZGVkIHdoZW4gdGhlIHBvbHlmaWxsIGZpcnN0IGxvYWRzLCBhbmQgYW55dGltZVxuICAgICAqIHRoZSB3aW5kb3cgaXMgYmx1cnJlZCwgc28gdGhhdCB0aGV5IGFyZSBhY3RpdmUgd2hlbiB0aGUgd2luZG93IHJlZ2FpbnNcbiAgICAgKiBmb2N1cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBwb2xmeWlsbCBmaXJzdCBsb2FkcywgYXNzdW1lIHRoZSB1c2VyIGlzIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIElmIGFueSBldmVudCBpcyByZWNlaXZlZCBmcm9tIGEgcG9pbnRpbmcgZGV2aWNlIChlLmcuIG1vdXNlLCBwb2ludGVyLFxuICAgICAqIHRvdWNoKSwgdHVybiBvZmYga2V5Ym9hcmQgbW9kYWxpdHkuXG4gICAgICogVGhpcyBhY2NvdW50cyBmb3Igc2l0dWF0aW9ucyB3aGVyZSBmb2N1cyBlbnRlcnMgdGhlIHBhZ2UgZnJvbSB0aGUgVVJMIGJhci5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Jbml0aWFsUG9pbnRlck1vdmUoZSkge1xuICAgICAgLy8gV29yayBhcm91bmQgYSBTYWZhcmkgcXVpcmsgdGhhdCBmaXJlcyBhIG1vdXNlbW92ZSBvbiA8aHRtbD4gd2hlbmV2ZXIgdGhlXG4gICAgICAvLyB3aW5kb3cgYmx1cnMsIGV2ZW4gaWYgeW91J3JlIHRhYmJpbmcgb3V0IG9mIHRoZSBwYWdlLiDCr1xcXyjjg4QpXy/Cr1xuICAgICAgaWYgKGUudGFyZ2V0Lm5vZGVOYW1lICYmIGUudGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdodG1sJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbiAgICAgIHJlbW92ZUluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpO1xuICAgIH1cblxuICAgIC8vIEZvciBzb21lIGtpbmRzIG9mIHN0YXRlLCB3ZSBhcmUgaW50ZXJlc3RlZCBpbiBjaGFuZ2VzIGF0IHRoZSBnbG9iYWwgc2NvcGVcbiAgICAvLyBvbmx5LiBGb3IgZXhhbXBsZSwgZ2xvYmFsIHBvaW50ZXIgaW5wdXQsIGdsb2JhbCBrZXkgcHJlc3NlcyBhbmQgZ2xvYmFsXG4gICAgLy8gdmlzaWJpbGl0eSBjaGFuZ2Ugc2hvdWxkIGFmZmVjdCB0aGUgc3RhdGUgYXQgZXZlcnkgc2NvcGU6XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5RG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBvblBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG5cbiAgICBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKTtcblxuICAgIC8vIEZvciBmb2N1cyBhbmQgYmx1ciwgd2Ugc3BlY2lmaWNhbGx5IGNhcmUgYWJvdXQgc3RhdGUgY2hhbmdlcyBpbiB0aGUgbG9jYWxcbiAgICAvLyBzY29wZS4gVGhpcyBpcyBiZWNhdXNlIGZvY3VzIC8gYmx1ciBldmVudHMgdGhhdCBvcmlnaW5hdGUgZnJvbSB3aXRoaW4gYVxuICAgIC8vIHNoYWRvdyByb290IGFyZSBub3QgcmUtZGlzcGF0Y2hlZCBmcm9tIHRoZSBob3N0IGVsZW1lbnQgaWYgaXQgd2FzIGFscmVhZHlcbiAgICAvLyB0aGUgYWN0aXZlIGVsZW1lbnQgaW4gaXRzIG93biBzY29wZTpcbiAgICBzY29wZS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIG9uRm9jdXMsIHRydWUpO1xuICAgIHNjb3BlLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbkJsdXIsIHRydWUpO1xuXG4gICAgLy8gV2UgZGV0ZWN0IHRoYXQgYSBub2RlIGlzIGEgU2hhZG93Um9vdCBieSBlbnN1cmluZyB0aGF0IGl0IGlzIGFcbiAgICAvLyBEb2N1bWVudEZyYWdtZW50IGFuZCBhbHNvIGhhcyBhIGhvc3QgcHJvcGVydHkuIFRoaXMgY2hlY2sgY292ZXJzIG5hdGl2ZVxuICAgIC8vIGltcGxlbWVudGF0aW9uIGFuZCBwb2x5ZmlsbCBpbXBsZW1lbnRhdGlvbiB0cmFuc3BhcmVudGx5LiBJZiB3ZSBvbmx5IGNhcmVkXG4gICAgLy8gYWJvdXQgdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgd2UgY291bGQganVzdCBjaGVjayBpZiB0aGUgc2NvcGUgd2FzXG4gICAgLy8gYW4gaW5zdGFuY2Ugb2YgYSBTaGFkb3dSb290LlxuICAgIGlmIChzY29wZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFICYmIHNjb3BlLmhvc3QpIHtcbiAgICAgIC8vIFNpbmNlIGEgU2hhZG93Um9vdCBpcyBhIHNwZWNpYWwga2luZCBvZiBEb2N1bWVudEZyYWdtZW50LCBpdCBkb2VzIG5vdFxuICAgICAgLy8gaGF2ZSBhIHJvb3QgZWxlbWVudCB0byBhZGQgYSBjbGFzcyB0by4gU28sIHdlIGFkZCB0aGlzIGF0dHJpYnV0ZSB0byB0aGVcbiAgICAgIC8vIGhvc3QgZWxlbWVudCBpbnN0ZWFkOlxuICAgICAgc2NvcGUuaG9zdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtanMtZm9jdXMtdmlzaWJsZScsICcnKTtcbiAgICB9IGVsc2UgaWYgKHNjb3BlLm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX05PREUpIHtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdqcy1mb2N1cy12aXNpYmxlJyk7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWpzLWZvY3VzLXZpc2libGUnLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gSXQgaXMgaW1wb3J0YW50IHRvIHdyYXAgYWxsIHJlZmVyZW5jZXMgdG8gZ2xvYmFsIHdpbmRvdyBhbmQgZG9jdW1lbnQgaW5cbiAgLy8gdGhlc2UgY2hlY2tzIHRvIHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHVzZSBjYXNlc1xuICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvaXNzdWVzLzE5OVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIE1ha2UgdGhlIHBvbHlmaWxsIGhlbHBlciBnbG9iYWxseSBhdmFpbGFibGUuIFRoaXMgY2FuIGJlIHVzZWQgYXMgYSBzaWduYWxcbiAgICAvLyB0byBpbnRlcmVzdGVkIGxpYnJhcmllcyB0aGF0IHdpc2ggdG8gY29vcmRpbmF0ZSB3aXRoIHRoZSBwb2x5ZmlsbCBmb3IgZS5nLixcbiAgICAvLyBhcHBseWluZyB0aGUgcG9seWZpbGwgdG8gYSBzaGFkb3cgcm9vdDpcbiAgICB3aW5kb3cuYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbCA9IGFwcGx5Rm9jdXNWaXNpYmxlUG9seWZpbGw7XG5cbiAgICAvLyBOb3RpZnkgaW50ZXJlc3RlZCBsaWJyYXJpZXMgb2YgdGhlIHBvbHlmaWxsJ3MgcHJlc2VuY2UsIGluIGNhc2UgdGhlXG4gICAgLy8gcG9seWZpbGwgd2FzIGxvYWRlZCBsYXppbHk6XG4gICAgdmFyIGV2ZW50O1xuXG4gICAgdHJ5IHtcbiAgICAgIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdmb2N1cy12aXNpYmxlLXBvbHlmaWxsLXJlYWR5Jyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCB1c2luZyBDdXN0b21FdmVudCBhcyBhIGNvbnN0cnVjdG9yIGRpcmVjdGx5OlxuICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudCgnZm9jdXMtdmlzaWJsZS1wb2x5ZmlsbC1yZWFkeScsIGZhbHNlLCBmYWxzZSwge30pO1xuICAgIH1cblxuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gQXBwbHkgdGhlIHBvbHlmaWxsIHRvIHRoZSBnbG9iYWwgZG9jdW1lbnQsIHNvIHRoYXQgbm8gSmF2YVNjcmlwdFxuICAgIC8vIGNvb3JkaW5hdGlvbiBpcyByZXF1aXJlZCB0byB1c2UgdGhlIHBvbHlmaWxsIGluIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQ6XG4gICAgYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbChkb2N1bWVudCk7XG4gIH1cblxufSkpKTtcbiIsIiFmdW5jdGlvbih0LG4pe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPW4oKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKG4pOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuTGF6eUxvYWQ9bigpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoKXtyZXR1cm4odD1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0KXtmb3IodmFyIG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXt2YXIgZT1hcmd1bWVudHNbbl07Zm9yKHZhciBpIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsaSkmJih0W2ldPWVbaV0pfXJldHVybiB0fSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3csZT1uJiYhKFwib25zY3JvbGxcImluIHdpbmRvdyl8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJi8oZ2xlfGluZ3xybylib3R8Y3Jhd2x8c3BpZGVyL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxpPW4mJlwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcImluIHdpbmRvdyxvPW4mJlwiY2xhc3NMaXN0XCJpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKSxyPW4mJndpbmRvdy5kZXZpY2VQaXhlbFJhdGlvPjEsYT17ZWxlbWVudHNfc2VsZWN0b3I6XCIubGF6eVwiLGNvbnRhaW5lcjplfHxuP2RvY3VtZW50Om51bGwsdGhyZXNob2xkOjMwMCx0aHJlc2hvbGRzOm51bGwsZGF0YV9zcmM6XCJzcmNcIixkYXRhX3NyY3NldDpcInNyY3NldFwiLGRhdGFfc2l6ZXM6XCJzaXplc1wiLGRhdGFfYmc6XCJiZ1wiLGRhdGFfYmdfaGlkcGk6XCJiZy1oaWRwaVwiLGRhdGFfYmdfbXVsdGk6XCJiZy1tdWx0aVwiLGRhdGFfYmdfbXVsdGlfaGlkcGk6XCJiZy1tdWx0aS1oaWRwaVwiLGRhdGFfcG9zdGVyOlwicG9zdGVyXCIsY2xhc3NfYXBwbGllZDpcImFwcGxpZWRcIixjbGFzc19sb2FkaW5nOlwibG9hZGluZ1wiLGNsYXNzX2xvYWRlZDpcImxvYWRlZFwiLGNsYXNzX2Vycm9yOlwiZXJyb3JcIixjbGFzc19lbnRlcmVkOlwiZW50ZXJlZFwiLGNsYXNzX2V4aXRlZDpcImV4aXRlZFwiLHVub2JzZXJ2ZV9jb21wbGV0ZWQ6ITAsdW5vYnNlcnZlX2VudGVyZWQ6ITEsY2FuY2VsX29uX2V4aXQ6ITAsY2FsbGJhY2tfZW50ZXI6bnVsbCxjYWxsYmFja19leGl0Om51bGwsY2FsbGJhY2tfYXBwbGllZDpudWxsLGNhbGxiYWNrX2xvYWRpbmc6bnVsbCxjYWxsYmFja19sb2FkZWQ6bnVsbCxjYWxsYmFja19lcnJvcjpudWxsLGNhbGxiYWNrX2ZpbmlzaDpudWxsLGNhbGxiYWNrX2NhbmNlbDpudWxsLHVzZV9uYXRpdmU6ITF9LGM9ZnVuY3Rpb24obil7cmV0dXJuIHQoe30sYSxuKX0scz1mdW5jdGlvbih0LG4pe3ZhciBlLGk9XCJMYXp5TG9hZDo6SW5pdGlhbGl6ZWRcIixvPW5ldyB0KG4pO3RyeXtlPW5ldyBDdXN0b21FdmVudChpLHtkZXRhaWw6e2luc3RhbmNlOm99fSl9Y2F0Y2godCl7KGU9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKSkuaW5pdEN1c3RvbUV2ZW50KGksITEsITEse2luc3RhbmNlOm99KX13aW5kb3cuZGlzcGF0Y2hFdmVudChlKX0sbD1cImxvYWRpbmdcIix1PVwibG9hZGVkXCIsZD1cImFwcGxpZWRcIixmPVwiZXJyb3JcIixfPVwibmF0aXZlXCIsZz1cImRhdGEtXCIsdj1cImxsLXN0YXR1c1wiLGI9ZnVuY3Rpb24odCxuKXtyZXR1cm4gdC5nZXRBdHRyaWJ1dGUoZytuKX0scD1mdW5jdGlvbih0KXtyZXR1cm4gYih0LHYpfSxoPWZ1bmN0aW9uKHQsbil7cmV0dXJuIGZ1bmN0aW9uKHQsbixlKXt2YXIgaT1cImRhdGEtbGwtc3RhdHVzXCI7bnVsbCE9PWU/dC5zZXRBdHRyaWJ1dGUoaSxlKTp0LnJlbW92ZUF0dHJpYnV0ZShpKX0odCwwLG4pfSxtPWZ1bmN0aW9uKHQpe3JldHVybiBoKHQsbnVsbCl9LEU9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PT1wKHQpfSx5PWZ1bmN0aW9uKHQpe3JldHVybiBwKHQpPT09X30sST1bbCx1LGQsZl0sQT1mdW5jdGlvbih0LG4sZSxpKXt0JiYodm9pZCAwPT09aT92b2lkIDA9PT1lP3Qobik6dChuLGUpOnQobixlLGkpKX0sTD1mdW5jdGlvbih0LG4pe28/dC5jbGFzc0xpc3QuYWRkKG4pOnQuY2xhc3NOYW1lKz0odC5jbGFzc05hbWU/XCIgXCI6XCJcIikrbn0sdz1mdW5jdGlvbih0LG4pe28/dC5jbGFzc0xpc3QucmVtb3ZlKG4pOnQuY2xhc3NOYW1lPXQuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChcIihefFxcXFxzKylcIituK1wiKFxcXFxzK3wkKVwiKSxcIiBcIikucmVwbGFjZSgvXlxccysvLFwiXCIpLnJlcGxhY2UoL1xccyskLyxcIlwiKX0saz1mdW5jdGlvbih0KXtyZXR1cm4gdC5sbFRlbXBJbWFnZX0sTz1mdW5jdGlvbih0LG4pe2lmKG4pe3ZhciBlPW4uX29ic2VydmVyO2UmJmUudW5vYnNlcnZlKHQpfX0seD1mdW5jdGlvbih0LG4pe3QmJih0LmxvYWRpbmdDb3VudCs9bil9LHo9ZnVuY3Rpb24odCxuKXt0JiYodC50b0xvYWRDb3VudD1uKX0sQz1mdW5jdGlvbih0KXtmb3IodmFyIG4sZT1bXSxpPTA7bj10LmNoaWxkcmVuW2ldO2krPTEpXCJTT1VSQ0VcIj09PW4udGFnTmFtZSYmZS5wdXNoKG4pO3JldHVybiBlfSxOPWZ1bmN0aW9uKHQsbixlKXtlJiZ0LnNldEF0dHJpYnV0ZShuLGUpfSxNPWZ1bmN0aW9uKHQsbil7dC5yZW1vdmVBdHRyaWJ1dGUobil9LFI9ZnVuY3Rpb24odCl7cmV0dXJuISF0LmxsT3JpZ2luYWxBdHRyc30sVD1mdW5jdGlvbih0KXtpZighUih0KSl7dmFyIG49e307bi5zcmM9dC5nZXRBdHRyaWJ1dGUoXCJzcmNcIiksbi5zcmNzZXQ9dC5nZXRBdHRyaWJ1dGUoXCJzcmNzZXRcIiksbi5zaXplcz10LmdldEF0dHJpYnV0ZShcInNpemVzXCIpLHQubGxPcmlnaW5hbEF0dHJzPW59fSxHPWZ1bmN0aW9uKHQpe2lmKFIodCkpe3ZhciBuPXQubGxPcmlnaW5hbEF0dHJzO04odCxcInNyY1wiLG4uc3JjKSxOKHQsXCJzcmNzZXRcIixuLnNyY3NldCksTih0LFwic2l6ZXNcIixuLnNpemVzKX19LEQ9ZnVuY3Rpb24odCxuKXtOKHQsXCJzaXplc1wiLGIodCxuLmRhdGFfc2l6ZXMpKSxOKHQsXCJzcmNzZXRcIixiKHQsbi5kYXRhX3NyY3NldCkpLE4odCxcInNyY1wiLGIodCxuLmRhdGFfc3JjKSl9LFY9ZnVuY3Rpb24odCl7TSh0LFwic3JjXCIpLE0odCxcInNyY3NldFwiKSxNKHQsXCJzaXplc1wiKX0saj1mdW5jdGlvbih0LG4pe3ZhciBlPXQucGFyZW50Tm9kZTtlJiZcIlBJQ1RVUkVcIj09PWUudGFnTmFtZSYmQyhlKS5mb3JFYWNoKG4pfSxGPXtJTUc6ZnVuY3Rpb24odCxuKXtqKHQsKGZ1bmN0aW9uKHQpe1QodCksRCh0LG4pfSkpLFQodCksRCh0LG4pfSxJRlJBTUU6ZnVuY3Rpb24odCxuKXtOKHQsXCJzcmNcIixiKHQsbi5kYXRhX3NyYykpfSxWSURFTzpmdW5jdGlvbih0LG4peyFmdW5jdGlvbih0LGUpe0ModCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7Tih0LFwic3JjXCIsYih0LG4uZGF0YV9zcmMpKX0pKX0odCksTih0LFwicG9zdGVyXCIsYih0LG4uZGF0YV9wb3N0ZXIpKSxOKHQsXCJzcmNcIixiKHQsbi5kYXRhX3NyYykpLHQubG9hZCgpfX0sUD1mdW5jdGlvbih0LG4pe3ZhciBlPUZbdC50YWdOYW1lXTtlJiZlKHQsbil9LFM9ZnVuY3Rpb24odCxuLGUpe3goZSwxKSxMKHQsbi5jbGFzc19sb2FkaW5nKSxoKHQsbCksQShuLmNhbGxiYWNrX2xvYWRpbmcsdCxlKX0sVT1bXCJJTUdcIixcIklGUkFNRVwiLFwiVklERU9cIl0sJD1mdW5jdGlvbih0LG4peyFufHxmdW5jdGlvbih0KXtyZXR1cm4gdC5sb2FkaW5nQ291bnQ+MH0obil8fGZ1bmN0aW9uKHQpe3JldHVybiB0LnRvTG9hZENvdW50PjB9KG4pfHxBKHQuY2FsbGJhY2tfZmluaXNoLG4pfSxxPWZ1bmN0aW9uKHQsbixlKXt0LmFkZEV2ZW50TGlzdGVuZXIobixlKSx0LmxsRXZMaXNucnNbbl09ZX0sSD1mdW5jdGlvbih0LG4sZSl7dC5yZW1vdmVFdmVudExpc3RlbmVyKG4sZSl9LEI9ZnVuY3Rpb24odCl7cmV0dXJuISF0LmxsRXZMaXNucnN9LEo9ZnVuY3Rpb24odCl7aWYoQih0KSl7dmFyIG49dC5sbEV2TGlzbnJzO2Zvcih2YXIgZSBpbiBuKXt2YXIgaT1uW2VdO0godCxlLGkpfWRlbGV0ZSB0LmxsRXZMaXNucnN9fSxLPWZ1bmN0aW9uKHQsbixlKXshZnVuY3Rpb24odCl7ZGVsZXRlIHQubGxUZW1wSW1hZ2V9KHQpLHgoZSwtMSksZnVuY3Rpb24odCl7dCYmKHQudG9Mb2FkQ291bnQtPTEpfShlKSx3KHQsbi5jbGFzc19sb2FkaW5nKSxuLnVub2JzZXJ2ZV9jb21wbGV0ZWQmJk8odCxlKX0sUT1mdW5jdGlvbih0LG4sZSl7dmFyIGk9ayh0KXx8dDtCKGkpfHxmdW5jdGlvbih0LG4sZSl7Qih0KXx8KHQubGxFdkxpc25ycz17fSk7dmFyIGk9XCJWSURFT1wiPT09dC50YWdOYW1lP1wibG9hZGVkZGF0YVwiOlwibG9hZFwiO3EodCxpLG4pLHEodCxcImVycm9yXCIsZSl9KGksKGZ1bmN0aW9uKG8peyFmdW5jdGlvbih0LG4sZSxpKXt2YXIgbz15KG4pO0sobixlLGkpLEwobixlLmNsYXNzX2xvYWRlZCksaChuLHUpLEEoZS5jYWxsYmFja19sb2FkZWQsbixpKSxvfHwkKGUsaSl9KDAsdCxuLGUpLEooaSl9KSwoZnVuY3Rpb24obyl7IWZ1bmN0aW9uKHQsbixlLGkpe3ZhciBvPXkobik7SyhuLGUsaSksTChuLGUuY2xhc3NfZXJyb3IpLGgobixmKSxBKGUuY2FsbGJhY2tfZXJyb3IsbixpKSxvfHwkKGUsaSl9KDAsdCxuLGUpLEooaSl9KSl9LFc9ZnVuY3Rpb24odCxuLGUpeyFmdW5jdGlvbih0KXt0LmxsVGVtcEltYWdlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJJTUdcIil9KHQpLFEodCxuLGUpLGZ1bmN0aW9uKHQsbixlKXt2YXIgaT1iKHQsbi5kYXRhX2JnKSxvPWIodCxuLmRhdGFfYmdfaGlkcGkpLGE9ciYmbz9vOmk7YSYmKHQuc3R5bGUuYmFja2dyb3VuZEltYWdlPSd1cmwoXCInLmNvbmNhdChhLCdcIiknKSxrKHQpLnNldEF0dHJpYnV0ZShcInNyY1wiLGEpLFModCxuLGUpKX0odCxuLGUpLGZ1bmN0aW9uKHQsbixlKXt2YXIgaT1iKHQsbi5kYXRhX2JnX211bHRpKSxvPWIodCxuLmRhdGFfYmdfbXVsdGlfaGlkcGkpLGE9ciYmbz9vOmk7YSYmKHQuc3R5bGUuYmFja2dyb3VuZEltYWdlPWEsZnVuY3Rpb24odCxuLGUpe0wodCxuLmNsYXNzX2FwcGxpZWQpLGgodCxkKSxuLnVub2JzZXJ2ZV9jb21wbGV0ZWQmJk8odCxuKSxBKG4uY2FsbGJhY2tfYXBwbGllZCx0LGUpfSh0LG4sZSkpfSh0LG4sZSl9LFg9ZnVuY3Rpb24odCxuLGUpeyFmdW5jdGlvbih0KXtyZXR1cm4gVS5pbmRleE9mKHQudGFnTmFtZSk+LTF9KHQpP1codCxuLGUpOmZ1bmN0aW9uKHQsbixlKXtRKHQsbixlKSxQKHQsbiksUyh0LG4sZSl9KHQsbixlKX0sWT1bXCJJTUdcIixcIklGUkFNRVwiLFwiVklERU9cIl0sWj1mdW5jdGlvbih0KXtyZXR1cm4gdC51c2VfbmF0aXZlJiZcImxvYWRpbmdcImluIEhUTUxJbWFnZUVsZW1lbnQucHJvdG90eXBlfSx0dD1mdW5jdGlvbih0LG4sZSl7dC5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIHQuaXNJbnRlcnNlY3Rpbmd8fHQuaW50ZXJzZWN0aW9uUmF0aW8+MH0odCk/ZnVuY3Rpb24odCxuLGUsaSl7dmFyIG89ZnVuY3Rpb24odCl7cmV0dXJuIEkuaW5kZXhPZihwKHQpKT49MH0odCk7aCh0LFwiZW50ZXJlZFwiKSxMKHQsZS5jbGFzc19lbnRlcmVkKSx3KHQsZS5jbGFzc19leGl0ZWQpLGZ1bmN0aW9uKHQsbixlKXtuLnVub2JzZXJ2ZV9lbnRlcmVkJiZPKHQsZSl9KHQsZSxpKSxBKGUuY2FsbGJhY2tfZW50ZXIsdCxuLGkpLG98fFgodCxlLGkpfSh0LnRhcmdldCx0LG4sZSk6ZnVuY3Rpb24odCxuLGUsaSl7RSh0KXx8KEwodCxlLmNsYXNzX2V4aXRlZCksZnVuY3Rpb24odCxuLGUsaSl7ZS5jYW5jZWxfb25fZXhpdCYmZnVuY3Rpb24odCl7cmV0dXJuIHAodCk9PT1sfSh0KSYmXCJJTUdcIj09PXQudGFnTmFtZSYmKEoodCksZnVuY3Rpb24odCl7aih0LChmdW5jdGlvbih0KXtWKHQpfSkpLFYodCl9KHQpLGZ1bmN0aW9uKHQpe2oodCwoZnVuY3Rpb24odCl7Ryh0KX0pKSxHKHQpfSh0KSx3KHQsZS5jbGFzc19sb2FkaW5nKSx4KGksLTEpLG0odCksQShlLmNhbGxiYWNrX2NhbmNlbCx0LG4saSkpfSh0LG4sZSxpKSxBKGUuY2FsbGJhY2tfZXhpdCx0LG4saSkpfSh0LnRhcmdldCx0LG4sZSl9KSl9LG50PWZ1bmN0aW9uKHQpe3JldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0KX0sZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwodC5lbGVtZW50c19zZWxlY3Rvcil9LGl0PWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gcCh0KT09PWZ9KHQpfSxvdD1mdW5jdGlvbih0LG4pe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gbnQodCkuZmlsdGVyKEUpfSh0fHxldChuKSl9LHJ0PWZ1bmN0aW9uKHQsZSl7dmFyIG89Yyh0KTt0aGlzLl9zZXR0aW5ncz1vLHRoaXMubG9hZGluZ0NvdW50PTAsZnVuY3Rpb24odCxuKXtpJiYhWih0KSYmKG4uX29ic2VydmVyPW5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZnVuY3Rpb24oZSl7dHQoZSx0LG4pfSksZnVuY3Rpb24odCl7cmV0dXJue3Jvb3Q6dC5jb250YWluZXI9PT1kb2N1bWVudD9udWxsOnQuY29udGFpbmVyLHJvb3RNYXJnaW46dC50aHJlc2hvbGRzfHx0LnRocmVzaG9sZCtcInB4XCJ9fSh0KSkpfShvLHRoaXMpLGZ1bmN0aW9uKHQsZSl7biYmd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwoZnVuY3Rpb24oKXshZnVuY3Rpb24odCxuKXt2YXIgZTsoZT1ldCh0KSxudChlKS5maWx0ZXIoaXQpKS5mb3JFYWNoKChmdW5jdGlvbihuKXt3KG4sdC5jbGFzc19lcnJvciksbShuKX0pKSxuLnVwZGF0ZSgpfSh0LGUpfSkpfShvLHRoaXMpLHRoaXMudXBkYXRlKGUpfTtyZXR1cm4gcnQucHJvdG90eXBlPXt1cGRhdGU6ZnVuY3Rpb24odCl7dmFyIG4sbyxyPXRoaXMuX3NldHRpbmdzLGE9b3QodCxyKTt6KHRoaXMsYS5sZW5ndGgpLCFlJiZpP1oocik/ZnVuY3Rpb24odCxuLGUpe3QuZm9yRWFjaCgoZnVuY3Rpb24odCl7LTEhPT1ZLmluZGV4T2YodC50YWdOYW1lKSYmZnVuY3Rpb24odCxuLGUpe3Quc2V0QXR0cmlidXRlKFwibG9hZGluZ1wiLFwibGF6eVwiKSxRKHQsbixlKSxQKHQsbiksaCh0LF8pfSh0LG4sZSl9KSkseihlLDApfShhLHIsdGhpcyk6KG89YSxmdW5jdGlvbih0KXt0LmRpc2Nvbm5lY3QoKX0obj10aGlzLl9vYnNlcnZlciksZnVuY3Rpb24odCxuKXtuLmZvckVhY2goKGZ1bmN0aW9uKG4pe3Qub2JzZXJ2ZShuKX0pKX0obixvKSk6dGhpcy5sb2FkQWxsKGEpfSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5fb2JzZXJ2ZXImJnRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKSxldCh0aGlzLl9zZXR0aW5ncykuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZGVsZXRlIHQubGxPcmlnaW5hbEF0dHJzfSkpLGRlbGV0ZSB0aGlzLl9vYnNlcnZlcixkZWxldGUgdGhpcy5fc2V0dGluZ3MsZGVsZXRlIHRoaXMubG9hZGluZ0NvdW50LGRlbGV0ZSB0aGlzLnRvTG9hZENvdW50fSxsb2FkQWxsOmZ1bmN0aW9uKHQpe3ZhciBuPXRoaXMsZT10aGlzLl9zZXR0aW5ncztvdCh0LGUpLmZvckVhY2goKGZ1bmN0aW9uKHQpe08odCxuKSxYKHQsZSxuKX0pKX19LHJ0LmxvYWQ9ZnVuY3Rpb24odCxuKXt2YXIgZT1jKG4pO1godCxlKX0scnQucmVzZXRTdGF0dXM9ZnVuY3Rpb24odCl7bSh0KX0sbiYmZnVuY3Rpb24odCxuKXtpZihuKWlmKG4ubGVuZ3RoKWZvcih2YXIgZSxpPTA7ZT1uW2ldO2krPTEpcyh0LGUpO2Vsc2Ugcyh0LG4pfShydCx3aW5kb3cubGF6eUxvYWRPcHRpb25zKSxydH0pKTtcbiIsImV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICBpZiAoZWxlbS5nZXRDb250ZXh0ICYmIGVsZW0uZ2V0Q29udGV4dCgnMmQnKSkge1xuICAgIHJldHVybiBlbGVtLnRvRGF0YVVSTCgnaW1hZ2Uvd2VicCcpLmluZGV4T2YoJ2RhdGE6aW1hZ2Uvd2VicCcpID09PSAwO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCAoZm4pID0+IHtcbiAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmbik7XG4gIH0gZWxzZSB7XG4gICAgZm4oKTtcbiAgfVxufTtcbiIsImltcG9ydCBcImZvY3VzLXZpc2libGVcIjtcbmltcG9ydCBsYXp5SW1hZ2VzIGZyb20gXCIuL21vZHVsZXMvbGF6eUltYWdlc1wiO1xuaW1wb3J0IGRvY3VtZW50UmVhZHkgZnJvbSBcIi4vaGVscGVycy9kb2N1bWVudFJlYWR5XCI7XG5pbXBvcnQgXCIuL21lbnVjcm9zc1wiO1xuXG5kb2N1bWVudFJlYWR5KCgpID0+IHtcblx0bGF6eUltYWdlcygpO1xufSk7XG5TY3JvbGxSZXZlYWwoKS5yZXZlYWwoXCIuaGVhZGxpbmUxXCIsIHsgZGVsYXk6IDQwMCwgZGlzdGFuY2U6IFwiNTBweFwiIH0pO1xuU2Nyb2xsUmV2ZWFsKCkucmV2ZWFsKFwiLmhlYWRsaW5lMlwiLCB7IGRlbGF5OiA1MDAsIGRpc3RhbmNlOiBcIjUwcHhcIiB9KTtcblNjcm9sbFJldmVhbCgpLnJldmVhbChcIi5oZWFkbGluZTNcIiwgeyBkZWxheTogNjAwLCBkaXN0YW5jZTogXCI1MHB4XCIgfSk7XG5TY3JvbGxSZXZlYWwoKS5yZXZlYWwoXCIuaGVhZGxpbmU0XCIsIHsgZGVsYXk6IDcwMCwgZGlzdGFuY2U6IFwiNTBweFwiIH0pO1xuU2Nyb2xsUmV2ZWFsKCkucmV2ZWFsKFwiLmhlYWRsaW5lNVwiLCB7IGRlbGF5OiA4MDAsIGRpc3RhbmNlOiBcIjUwcHhcIiB9KTtcblNjcm9sbFJldmVhbCgpLnJldmVhbChcIi5oZWFkbGluZTZcIiwgeyBkZWxheTogOTAwLCBkaXN0YW5jZTogXCI1MHB4XCIgfSk7XG5cbmNvbnN0IHRyaWdnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ1cmdlclwiKTsgLy8gb3Igd2hhdGV2ZXIgdHJpZ2dlcnMgdGhlIHRvZ2dsZVxuY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2LW1lbnUgXCIpO1xuY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuXG5jb25zb2xlLmxvZyh0cmlnZ2VyKTtcblxudHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcblx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJhY3RpdmVcIik7IC8vIG9yIHdoYXRldmVyIHlvdXIgYWN0aXZlIGNsYXNzIGlzXG5cdGJvZHkuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKTsgLy8gb3Igd2hhdGV2ZXIgeW91ciBhY3RpdmUgY2xhc3MgaXNcbn0pO1xuXG5jb25zdCByZWZzID0ge1xuXHRvcGVuTW9kYWxCdG46IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1vcGVuLW1vZGFsXVwiKSxcblx0Y2xvc2VNb2RhbEJ0bjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLWNsb3NlLW1vZGFsXVwiKSxcblx0YmFja2Ryb3A6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1iYWNrZHJvcF1cIiksXG59O1xuXG5yZWZzLm9wZW5Nb2RhbEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdG9nZ2xlTW9kYWwpO1xucmVmcy5jbG9zZU1vZGFsQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0b2dnbGVNb2RhbCk7XG5cbnJlZnMuYmFja2Ryb3AuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGxvZ0JhY2tkcm9wQ2xpY2spO1xuXG5mdW5jdGlvbiB0b2dnbGVNb2RhbCgpIHtcblx0cmVmcy5iYWNrZHJvcC5jbGFzc0xpc3QudG9nZ2xlKFwiaXMtaGlkZGVuXCIpO1xufVxuXG5mdW5jdGlvbiBsb2dCYWNrZHJvcENsaWNrKCkge31cbiIsImNvbnN0IHRyaWdnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ1cmdlclwiKTsgLy8gb3Igd2hhdGV2ZXIgdHJpZ2dlcnMgdGhlIHRvZ2dsZVxuY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWVudSBcIik7XG5jb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wYWdlLWhvbWVcIik7XG5cbmNvbnNvbGUubG9nKHRyaWdnZXIpO1xuXG50cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuXHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKTsgLy8gb3Igd2hhdGV2ZXIgeW91ciBhY3RpdmUgY2xhc3MgaXNcblx0Ym9keS5jbGFzc0xpc3QudG9nZ2xlKFwic2lkZWJhci1pcy1vcGVuXCIpOyAvLyBvciB3aGF0ZXZlciB5b3VyIGFjdGl2ZSBjbGFzcyBpc1xufSk7XG4iLCJpbXBvcnQgTGF6eUxvYWQgZnJvbSAndmFuaWxsYS1sYXp5bG9hZCc7XG5pbXBvcnQgY2FuVXNlV2VicCBmcm9tICcuLi9oZWxwZXJzL2NhblVzZVdlYnAnO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGlmIChjYW5Vc2VXZWJwKCkgPT09IGZhbHNlKSB7XG4gICAgY29uc3QgbGF6eUJnSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubGF6eVtkYXRhLWJnLWZhbGxiYWNrXScpO1xuXG4gICAgbGF6eUJnSXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgY29uc3Qgc3JjQmdGYWxsYmFjayA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWJnLWZhbGxiYWNrJyk7XG4gICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1iZycsIHNyY0JnRmFsbGJhY2spO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIGNvbnN0IGxhenlMb2FkSW5zdGFuY2UgPSBuZXcgTGF6eUxvYWQoe1xuICAgIGVsZW1lbnRzX3NlbGVjdG9yOiAnLmxhenknLFxuICB9KTtcbn07XG4iXSwicHJlRXhpc3RpbmdDb21tZW50IjoiLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12Wm05amRYTXRkbWx6YVdKc1pTOWthWE4wTDJadlkzVnpMWFpwYzJsaWJHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZkbUZ1YVd4c1lTMXNZWHA1Ykc5aFpDOWthWE4wTDJ4aGVubHNiMkZrTG0xcGJpNXFjeUlzSW5OeVl5OXFjeTlvWld4d1pYSnpMMk5oYmxWelpWZGxZbkF1YW5NaUxDSnpjbU12YW5NdmFHVnNjR1Z5Y3k5a2IyTjFiV1Z1ZEZKbFlXUjVMbXB6SWl3aWMzSmpMMnB6TDIxaGFXNHVhbk1pTENKemNtTXZhbk12YldWdWRXTnliM056TG1weklpd2ljM0pqTDJwekwyMXZaSFZzWlhNdmJHRjZlVWx0WVdkbGN5NXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzaFVRVHRCUVVOQk96czdPenM3T3pzN1pVTkVaU3hOUVVGTk8wRkJRMjVDTEZGQlFVMHNTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGVUxFTkJRWFZDTEZGQlFYWkNMRU5CUVdJN08wRkJRMEVzVFVGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVEN4SlFVRnRRaXhKUVVGSkxFTkJRVU1zVlVGQlRDeERRVUZuUWl4SlFVRm9RaXhEUVVGMlFpeEZRVUU0UXp0QlFVTTFReXhYUVVGUExFbEJRVWtzUTBGQlF5eFRRVUZNTEVOQlFXVXNXVUZCWml4RlFVRTJRaXhQUVVFM1FpeERRVUZ4UXl4cFFrRkJja01zVFVGQk5FUXNRMEZCYmtVN1FVRkRSRHM3UVVGRFJDeFRRVUZQTEV0QlFWQTdRVUZEUkN4RE96czdPenM3T3pzN096czdaVU5PWlN4RlFVRkVMRWxCUVZFN1FVRkRja0lzVFVGQlNTeFJRVUZSTEVOQlFVTXNWVUZCVkN4TFFVRjNRaXhUUVVFMVFpeEZRVUYxUXp0QlFVTnlReXhKUVVGQkxGRkJRVkVzUTBGQlF5eG5Ra0ZCVkN4RFFVRXdRaXhyUWtGQk1VSXNSVUZCT0VNc1JVRkJPVU03UVVGRFJDeEhRVVpFTEUxQlJVODdRVUZEVEN4SlFVRkJMRVZCUVVVN1FVRkRTRHRCUVVOR0xFTTdPenM3T3pzN1FVTk9SRHM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3T3p0QlFVVkJMRFJDUVVGakxFMUJRVTA3UVVGRGJrSTdRVUZEUVN4RFFVWkVPMEZCUjBFc1dVRkJXU3hIUVVGSExFMUJRV1lzUTBGQmMwSXNXVUZCZEVJc1JVRkJiME03UVVGQlJTeEZRVUZCTEV0QlFVc3NSVUZCUlN4SFFVRlVPMEZCUVdNc1JVRkJRU3hSUVVGUkxFVkJRVVU3UVVGQmVFSXNRMEZCY0VNN1FVRkRRU3haUVVGWkxFZEJRVWNzVFVGQlppeERRVUZ6UWl4WlFVRjBRaXhGUVVGdlF6dEJRVUZGTEVWQlFVRXNTMEZCU3l4RlFVRkZMRWRCUVZRN1FVRkJZeXhGUVVGQkxGRkJRVkVzUlVGQlJUdEJRVUY0UWl4RFFVRndRenRCUVVOQkxGbEJRVmtzUjBGQlJ5eE5RVUZtTEVOQlFYTkNMRmxCUVhSQ0xFVkJRVzlETzBGQlFVVXNSVUZCUVN4TFFVRkxMRVZCUVVVc1IwRkJWRHRCUVVGakxFVkJRVUVzVVVGQlVTeEZRVUZGTzBGQlFYaENMRU5CUVhCRE8wRkJRMEVzV1VGQldTeEhRVUZITEUxQlFXWXNRMEZCYzBJc1dVRkJkRUlzUlVGQmIwTTdRVUZCUlN4RlFVRkJMRXRCUVVzc1JVRkJSU3hIUVVGVU8wRkJRV01zUlVGQlFTeFJRVUZSTEVWQlFVVTdRVUZCZUVJc1EwRkJjRU03UVVGRFFTeFpRVUZaTEVkQlFVY3NUVUZCWml4RFFVRnpRaXhaUVVGMFFpeEZRVUZ2UXp0QlFVRkZMRVZCUVVFc1MwRkJTeXhGUVVGRkxFZEJRVlE3UVVGQll5eEZRVUZCTEZGQlFWRXNSVUZCUlR0QlFVRjRRaXhEUVVGd1F6dEJRVU5CTEZsQlFWa3NSMEZCUnl4TlFVRm1MRU5CUVhOQ0xGbEJRWFJDTEVWQlFXOURPMEZCUVVVc1JVRkJRU3hMUVVGTExFVkJRVVVzUjBGQlZEdEJRVUZqTEVWQlFVRXNVVUZCVVN4RlFVRkZPMEZCUVhoQ0xFTkJRWEJETzBGQlJVRXNUVUZCVFN4UFFVRlBMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRVlFzUTBGQmRVSXNVMEZCZGtJc1EwRkJhRUlzUXl4RFFVRnRSRHM3UVVGRGJrUXNUVUZCVFN4UFFVRlBMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRVlFzUTBGQmRVSXNXVUZCZGtJc1EwRkJhRUk3UVVGRFFTeE5RVUZOTEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJWQ3hEUVVGMVFpeE5RVUYyUWl4RFFVRmlPMEZCUlVFc1QwRkJUeXhEUVVGRExFZEJRVklzUTBGQldTeFBRVUZhTzBGQlJVRXNUMEZCVHl4RFFVRkRMR2RDUVVGU0xFTkJRWGxDTEU5QlFYcENMRVZCUVd0RExGVkJRVlVzUTBGQlZpeEZRVUZoTzBGQlF6bERMRVZCUVVFc1EwRkJReXhEUVVGRExHTkJRVVk3UVVGRFFTeEZRVUZCTEU5QlFVOHNRMEZCUXl4VFFVRlNMRU5CUVd0Q0xFMUJRV3hDTEVOQlFYbENMRkZCUVhwQ0xFVkJSamhETEVOQlJWWTdPMEZCUTNCRExFVkJRVUVzU1VGQlNTeERRVUZETEZOQlFVd3NRMEZCWlN4TlFVRm1MRU5CUVhOQ0xGRkJRWFJDTEVWQlNEaERMRU5CUjJJN1FVRkRha01zUTBGS1JEdEJRVTFCTEUxQlFVMHNTVUZCU1N4SFFVRkhPMEZCUTFvc1JVRkJRU3haUVVGWkxFVkJRVVVzVVVGQlVTeERRVUZETEdGQlFWUXNRMEZCZFVJc2JVSkJRWFpDTEVOQlJFWTdRVUZGV2l4RlFVRkJMR0ZCUVdFc1JVRkJSU3hSUVVGUkxFTkJRVU1zWVVGQlZDeERRVUYxUWl4dlFrRkJka0lzUTBGR1NEdEJRVWRhTEVWQlFVRXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhoUVVGVUxFTkJRWFZDTEdsQ1FVRjJRanRCUVVoRkxFTkJRV0k3UVVGTlFTeEpRVUZKTEVOQlFVTXNXVUZCVEN4RFFVRnJRaXhuUWtGQmJFSXNRMEZCYlVNc1QwRkJia01zUlVGQk5FTXNWMEZCTlVNN1FVRkRRU3hKUVVGSkxFTkJRVU1zWVVGQlRDeERRVUZ0UWl4blFrRkJia0lzUTBGQmIwTXNUMEZCY0VNc1JVRkJOa01zVjBGQk4wTTdRVUZGUVN4SlFVRkpMRU5CUVVNc1VVRkJUQ3hEUVVGakxHZENRVUZrTEVOQlFTdENMRTlCUVM5Q0xFVkJRWGRETEdkQ1FVRjRRenM3UVVGRlFTeFRRVUZUTEZkQlFWUXNSMEZCZFVJN1FVRkRkRUlzUlVGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVEN4RFFVRmpMRk5CUVdRc1EwRkJkMElzVFVGQmVFSXNRMEZCSzBJc1YwRkJMMEk3UVVGRFFUczdRVUZGUkN4VFFVRlRMR2RDUVVGVUxFZEJRVFJDTEVOQlFVVTdPenM3TzBGRE1VTTVRaXhOUVVGTkxFOUJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCVkN4RFFVRjFRaXhUUVVGMlFpeERRVUZvUWl4RExFTkJRVzFFT3p0QlFVTnVSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCVkN4RFFVRjFRaXhSUVVGMlFpeERRVUZvUWp0QlFVTkJMRTFCUVUwc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZVTEVOQlFYVkNMRmxCUVhaQ0xFTkJRV0k3UVVGRlFTeFBRVUZQTEVOQlFVTXNSMEZCVWl4RFFVRlpMRTlCUVZvN1FVRkZRU3hQUVVGUExFTkJRVU1zWjBKQlFWSXNRMEZCZVVJc1QwRkJla0lzUlVGQmEwTXNWVUZCVlN4RFFVRldMRVZCUVdFN1FVRkRPVU1zUlVGQlFTeERRVUZETEVOQlFVTXNZMEZCUmp0QlFVTkJMRVZCUVVFc1QwRkJUeXhEUVVGRExGTkJRVklzUTBGQmEwSXNUVUZCYkVJc1EwRkJlVUlzVVVGQmVrSXNSVUZHT0VNc1EwRkZWanM3UVVGRGNFTXNSVUZCUVN4SlFVRkpMRU5CUVVNc1UwRkJUQ3hEUVVGbExFMUJRV1lzUTBGQmMwSXNhVUpCUVhSQ0xFVkJTRGhETEVOQlIwbzdRVUZETVVNc1EwRktSRHM3T3pzN096czdPenRCUTA1Qk96dEJRVU5CT3pzN08yVkJSV1VzVFVGQlRUdEJRVU51UWl4TlFVRkpMQ3RDUVVGcFFpeExRVUZ5UWl4RlFVRTBRanRCUVVNeFFpeFZRVUZOTEZkQlFWY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRVlFzUTBGQk1FSXNlVUpCUVRGQ0xFTkJRWEJDTzBGQlJVRXNTVUZCUVN4WFFVRlhMRU5CUVVNc1QwRkJXaXhEUVVGeFFpeEpRVUZFTEVsQlFWVTdRVUZETlVJc1dVRkJUU3hoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFVd3NRMEZCYTBJc2EwSkJRV3hDTEVOQlFYUkNPMEZCUTBFc1RVRkJRU3hKUVVGSkxFTkJRVU1zV1VGQlRDeERRVUZyUWl4VFFVRnNRaXhGUVVFMlFpeGhRVUUzUWp0QlFVTkVMRXRCU0VRN1FVRkpSQ3hIUVZKclFpeERRVlZ1UWpzN08wRkJRMEVzVVVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxIZENRVUZLTEVOQlFXRTdRVUZEY0VNc1NVRkJRU3hwUWtGQmFVSXNSVUZCUlR0QlFVUnBRaXhIUVVGaUxFTkJRWHBDTzBGQlIwUXNReUlzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUtDbDdablZ1WTNScGIyNGdjaWhsTEc0c2RDbDdablZ1WTNScGIyNGdieWhwTEdZcGUybG1LQ0Z1VzJsZEtYdHBaaWdoWlZ0cFhTbDdkbUZ5SUdNOVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdjbVZ4ZFdseVpTWW1jbVZ4ZFdseVpUdHBaaWdoWmlZbVl5bHlaWFIxY200Z1l5aHBMQ0V3S1R0cFppaDFLWEpsZEhWeWJpQjFLR2tzSVRBcE8zWmhjaUJoUFc1bGR5QkZjbkp2Y2loY0lrTmhibTV2ZENCbWFXNWtJRzF2WkhWc1pTQW5YQ0lyYVN0Y0lpZGNJaWs3ZEdoeWIzY2dZUzVqYjJSbFBWd2lUVTlFVlV4RlgwNVBWRjlHVDFWT1JGd2lMR0Y5ZG1GeUlIQTlibHRwWFQxN1pYaHdiM0owY3pwN2ZYMDdaVnRwWFZzd1hTNWpZV3hzS0hBdVpYaHdiM0owY3l4bWRXNWpkR2x2YmloeUtYdDJZWElnYmoxbFcybGRXekZkVzNKZE8zSmxkSFZ5YmlCdktHNThmSElwZlN4d0xIQXVaWGh3YjNKMGN5eHlMR1VzYml4MEtYMXlaWFIxY200Z2JsdHBYUzVsZUhCdmNuUnpmV1p2Y2loMllYSWdkVDFjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCeVpYRjFhWEpsSmlaeVpYRjFhWEpsTEdrOU1EdHBQSFF1YkdWdVozUm9PMmtyS3lsdktIUmJhVjBwTzNKbGRIVnliaUJ2ZlhKbGRIVnliaUJ5ZlNrb0tTSXNJaWhtZFc1amRHbHZiaUFvWjJ4dlltRnNMQ0JtWVdOMGIzSjVLU0I3WEc0Z0lIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdiVzlrZFd4bElDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lHWmhZM1J2Y25rb0tTQTZYRzRnSUhSNWNHVnZaaUJrWldacGJtVWdQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdaR1ZtYVc1bExtRnRaQ0EvSUdSbFptbHVaU2htWVdOMGIzSjVLU0E2WEc0Z0lDaG1ZV04wYjNKNUtDa3BPMXh1ZlNoMGFHbHpMQ0FvWm5WdVkzUnBiMjRnS0NrZ2V5QW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZ3Y0d4cFpYTWdkR2hsSURwbWIyTjFjeTEyYVhOcFlteGxJSEJ2YkhsbWFXeHNJR0YwSUhSb1pTQm5hWFpsYmlCelkyOXdaUzVjYmlBZ0lDb2dRU0J6WTI5d1pTQnBiaUIwYUdseklHTmhjMlVnYVhNZ1pXbDBhR1Z5SUhSb1pTQjBiM0F0YkdWMlpXd2dSRzlqZFcxbGJuUWdiM0lnWVNCVGFHRmtiM2NnVW05dmRDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHNvUkc5amRXMWxiblI4VTJoaFpHOTNVbTl2ZENsOUlITmpiM0JsWEc0Z0lDQXFJRUJ6WldVZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwxZEpRMGN2Wm05amRYTXRkbWx6YVdKc1pWeHVJQ0FnS2k5Y2JpQWdablZ1WTNScGIyNGdZWEJ3YkhsR2IyTjFjMVpwYzJsaWJHVlFiMng1Wm1sc2JDaHpZMjl3WlNrZ2UxeHVJQ0FnSUhaaGNpQm9ZV1JMWlhsaWIyRnlaRVYyWlc1MElEMGdkSEoxWlR0Y2JpQWdJQ0IyWVhJZ2FHRmtSbTlqZFhOV2FYTnBZbXhsVW1WalpXNTBiSGtnUFNCbVlXeHpaVHRjYmlBZ0lDQjJZWElnYUdGa1JtOWpkWE5XYVhOcFlteGxVbVZqWlc1MGJIbFVhVzFsYjNWMElEMGdiblZzYkR0Y2JseHVJQ0FnSUhaaGNpQnBibkIxZEZSNWNHVnpRV3hzYjNkc2FYTjBJRDBnZTF4dUlDQWdJQ0FnZEdWNGREb2dkSEoxWlN4Y2JpQWdJQ0FnSUhObFlYSmphRG9nZEhKMVpTeGNiaUFnSUNBZ0lIVnliRG9nZEhKMVpTeGNiaUFnSUNBZ0lIUmxiRG9nZEhKMVpTeGNiaUFnSUNBZ0lHVnRZV2xzT2lCMGNuVmxMRnh1SUNBZ0lDQWdjR0Z6YzNkdmNtUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNCdWRXMWlaWEk2SUhSeWRXVXNYRzRnSUNBZ0lDQmtZWFJsT2lCMGNuVmxMRnh1SUNBZ0lDQWdiVzl1ZEdnNklIUnlkV1VzWEc0Z0lDQWdJQ0IzWldWck9pQjBjblZsTEZ4dUlDQWdJQ0FnZEdsdFpUb2dkSEoxWlN4Y2JpQWdJQ0FnSUdSaGRHVjBhVzFsT2lCMGNuVmxMRnh1SUNBZ0lDQWdKMlJoZEdWMGFXMWxMV3h2WTJGc0p6b2dkSEoxWlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVpXeHdaWElnWm5WdVkzUnBiMjRnWm05eUlHeGxaMkZqZVNCaWNtOTNjMlZ5Y3lCaGJtUWdhV1p5WVcxbGN5QjNhR2xqYUNCemIyMWxkR2x0WlhNZ1ptOWpkWE5jYmlBZ0lDQWdLaUJsYkdWdFpXNTBjeUJzYVd0bElHUnZZM1Z0Wlc1MExDQmliMlI1TENCaGJtUWdibTl1TFdsdWRHVnlZV04wYVhabElGTldSeTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMFZzWlcxbGJuUjlJR1ZzWEc0Z0lDQWdJQ292WEc0Z0lDQWdablZ1WTNScGIyNGdhWE5XWVd4cFpFWnZZM1Z6VkdGeVoyVjBLR1ZzS1NCN1hHNGdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJR1ZzSUNZbVhHNGdJQ0FnSUNBZ0lHVnNJQ0U5UFNCa2IyTjFiV1Z1ZENBbUpseHVJQ0FnSUNBZ0lDQmxiQzV1YjJSbFRtRnRaU0FoUFQwZ0owaFVUVXduSUNZbVhHNGdJQ0FnSUNBZ0lHVnNMbTV2WkdWT1lXMWxJQ0U5UFNBblFrOUVXU2NnSmlaY2JpQWdJQ0FnSUNBZ0oyTnNZWE56VEdsemRDY2dhVzRnWld3Z0ppWmNiaUFnSUNBZ0lDQWdKMk52Ym5SaGFXNXpKeUJwYmlCbGJDNWpiR0Z6YzB4cGMzUmNiaUFnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRiMjF3ZFhSbGN5QjNhR1YwYUdWeUlIUm9aU0JuYVhabGJpQmxiR1Z0Wlc1MElITm9iM1ZzWkNCaGRYUnZiV0YwYVdOaGJHeDVJSFJ5YVdkblpYSWdkR2hsWEc0Z0lDQWdJQ29nWUdadlkzVnpMWFpwYzJsaWJHVmdJR05zWVhOeklHSmxhVzVuSUdGa1pHVmtMQ0JwTG1VdUlIZG9aWFJvWlhJZ2FYUWdjMmh2ZFd4a0lHRnNkMkY1Y3lCdFlYUmphRnh1SUNBZ0lDQXFJR0E2Wm05amRYTXRkbWx6YVdKc1pXQWdkMmhsYmlCbWIyTjFjMlZrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Uld4bGJXVnVkSDBnWld4Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0aWIyOXNaV0Z1ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1oxYm1OMGFXOXVJR1p2WTNWelZISnBaMmRsY25OTFpYbGliMkZ5WkUxdlpHRnNhWFI1S0dWc0tTQjdYRzRnSUNBZ0lDQjJZWElnZEhsd1pTQTlJR1ZzTG5SNWNHVTdYRzRnSUNBZ0lDQjJZWElnZEdGblRtRnRaU0E5SUdWc0xuUmhaMDVoYldVN1hHNWNiaUFnSUNBZ0lHbG1JQ2gwWVdkT1lXMWxJRDA5UFNBblNVNVFWVlFuSUNZbUlHbHVjSFYwVkhsd1pYTkJiR3h2ZDJ4cGMzUmJkSGx3WlYwZ0ppWWdJV1ZzTG5KbFlXUlBibXg1S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2RHRm5UbUZ0WlNBOVBUMGdKMVJGV0ZSQlVrVkJKeUFtSmlBaFpXd3VjbVZoWkU5dWJIa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2hsYkM1cGMwTnZiblJsYm5SRlpHbDBZV0pzWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmtaQ0IwYUdVZ1lHWnZZM1Z6TFhacGMybGliR1ZnSUdOc1lYTnpJSFJ2SUhSb1pTQm5hWFpsYmlCbGJHVnRaVzUwSUdsbUlHbDBJSGRoY3lCdWIzUWdZV1JrWldRZ1lubGNiaUFnSUNBZ0tpQjBhR1VnWVhWMGFHOXlMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdSV3hsYldWdWRIMGdaV3hjYmlBZ0lDQWdLaTljYmlBZ0lDQm1kVzVqZEdsdmJpQmhaR1JHYjJOMWMxWnBjMmxpYkdWRGJHRnpjeWhsYkNrZ2UxeHVJQ0FnSUNBZ2FXWWdLR1ZzTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3lnblptOWpkWE10ZG1semFXSnNaU2NwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdWc0xtTnNZWE56VEdsemRDNWhaR1FvSjJadlkzVnpMWFpwYzJsaWJHVW5LVHRjYmlBZ0lDQWdJR1ZzTG5ObGRFRjBkSEpwWW5WMFpTZ25aR0YwWVMxbWIyTjFjeTEyYVhOcFlteGxMV0ZrWkdWa0p5d2dKeWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGJXOTJaU0IwYUdVZ1lHWnZZM1Z6TFhacGMybGliR1ZnSUdOc1lYTnpJR1p5YjIwZ2RHaGxJR2RwZG1WdUlHVnNaVzFsYm5RZ2FXWWdhWFFnZDJGeklHNXZkRnh1SUNBZ0lDQXFJRzl5YVdkcGJtRnNiSGtnWVdSa1pXUWdZbmtnZEdobElHRjFkR2h2Y2k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBWc1pXMWxiblI5SUdWc1hHNGdJQ0FnSUNvdlhHNGdJQ0FnWm5WdVkzUnBiMjRnY21WdGIzWmxSbTlqZFhOV2FYTnBZbXhsUTJ4aGMzTW9aV3dwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2haV3d1YUdGelFYUjBjbWxpZFhSbEtDZGtZWFJoTFdadlkzVnpMWFpwYzJsaWJHVXRZV1JrWldRbktTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmxiQzVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ2RtYjJOMWN5MTJhWE5wWW14bEp5azdYRzRnSUNBZ0lDQmxiQzV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9KMlJoZEdFdFptOWpkWE10ZG1semFXSnNaUzFoWkdSbFpDY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWxtSUhSb1pTQnRiM04wSUhKbFkyVnVkQ0IxYzJWeUlHbHVkR1Z5WVdOMGFXOXVJSGRoY3lCMmFXRWdkR2hsSUd0bGVXSnZZWEprTzF4dUlDQWdJQ0FxSUdGdVpDQjBhR1VnYTJWNUlIQnlaWE56SUdScFpDQnViM1FnYVc1amJIVmtaU0JoSUcxbGRHRXNJR0ZzZEM5dmNIUnBiMjRzSUc5eUlHTnZiblJ5YjJ3Z2EyVjVPMXh1SUNBZ0lDQXFJSFJvWlc0Z2RHaGxJRzF2WkdGc2FYUjVJR2x6SUd0bGVXSnZZWEprTGlCUGRHaGxjbmRwYzJVc0lIUm9aU0J0YjJSaGJHbDBlU0JwY3lCdWIzUWdhMlY1WW05aGNtUXVYRzRnSUNBZ0lDb2dRWEJ3YkhrZ1lHWnZZM1Z6TFhacGMybGliR1ZnSUhSdklHRnVlU0JqZFhKeVpXNTBJR0ZqZEdsMlpTQmxiR1Z0Wlc1MElHRnVaQ0JyWldWd0lIUnlZV05yWEc0Z0lDQWdJQ29nYjJZZ2IzVnlJR3RsZVdKdllYSmtJRzF2WkdGc2FYUjVJSE4wWVhSbElIZHBkR2dnWUdoaFpFdGxlV0p2WVhKa1JYWmxiblJnTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3UzJWNVltOWhjbVJGZG1WdWRIMGdaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHWjFibU4wYVc5dUlHOXVTMlY1Ukc5M2JpaGxLU0I3WEc0Z0lDQWdJQ0JwWmlBb1pTNXRaWFJoUzJWNUlIeDhJR1V1WVd4MFMyVjVJSHg4SUdVdVkzUnliRXRsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2hwYzFaaGJHbGtSbTlqZFhOVVlYSm5aWFFvYzJOdmNHVXVZV04wYVhabFJXeGxiV1Z1ZENrcElIdGNiaUFnSUNBZ0lDQWdZV1JrUm05amRYTldhWE5wWW14bFEyeGhjM01vYzJOdmNHVXVZV04wYVhabFJXeGxiV1Z1ZENrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHaGhaRXRsZVdKdllYSmtSWFpsYm5RZ1BTQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVsbUlHRjBJR0Z1ZVNCd2IybHVkQ0JoSUhWelpYSWdZMnhwWTJ0eklIZHBkR2dnWVNCd2IybHVkR2x1WnlCa1pYWnBZMlVzSUdWdWMzVnlaU0IwYUdGMElIZGxJR05vWVc1blpWeHVJQ0FnSUNBcUlIUm9aU0J0YjJSaGJHbDBlU0JoZDJGNUlHWnliMjBnYTJWNVltOWhjbVF1WEc0Z0lDQWdJQ29nVkdocGN5QmhkbTlwWkhNZ2RHaGxJSE5wZEhWaGRHbHZiaUIzYUdWeVpTQmhJSFZ6WlhJZ2NISmxjM05sY3lCaElHdGxlU0J2YmlCaGJpQmhiSEpsWVdSNUlHWnZZM1Z6WldSY2JpQWdJQ0FnS2lCbGJHVnRaVzUwTENCaGJtUWdkR2hsYmlCamJHbGphM01nYjI0Z1lTQmthV1ptWlhKbGJuUWdaV3hsYldWdWRDd2dabTlqZFhOcGJtY2dhWFFnZDJsMGFDQmhYRzRnSUNBZ0lDb2djRzlwYm5ScGJtY2daR1YyYVdObExDQjNhR2xzWlNCM1pTQnpkR2xzYkNCMGFHbHVheUIzWlNkeVpTQnBiaUJyWlhsaWIyRnlaQ0J0YjJSaGJHbDBlUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMFYyWlc1MGZTQmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1puVnVZM1JwYjI0Z2IyNVFiMmx1ZEdWeVJHOTNiaWhsS1NCN1hHNGdJQ0FnSUNCb1lXUkxaWGxpYjJGeVpFVjJaVzUwSUQwZ1ptRnNjMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVDI0Z1lHWnZZM1Z6WUN3Z1lXUmtJSFJvWlNCZ1ptOWpkWE10ZG1semFXSnNaV0FnWTJ4aGMzTWdkRzhnZEdobElIUmhjbWRsZENCcFpqcGNiaUFnSUNBZ0tpQXRJSFJvWlNCMFlYSm5aWFFnY21WalpXbDJaV1FnWm05amRYTWdZWE1nWVNCeVpYTjFiSFFnYjJZZ2EyVjVZbTloY21RZ2JtRjJhV2RoZEdsdmJpd2diM0pjYmlBZ0lDQWdLaUF0SUhSb1pTQmxkbVZ1ZENCMFlYSm5aWFFnYVhNZ1lXNGdaV3hsYldWdWRDQjBhR0YwSUhkcGJHd2diR2xyWld4NUlISmxjWFZwY21VZ2FXNTBaWEpoWTNScGIyNWNiaUFnSUNBZ0tpQWdJSFpwWVNCMGFHVWdhMlY1WW05aGNtUWdLR1V1Wnk0Z1lTQjBaWGgwSUdKdmVDbGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwVjJaVzUwZlNCbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWm5WdVkzUnBiMjRnYjI1R2IyTjFjeWhsS1NCN1hHNGdJQ0FnSUNBdkx5QlFjbVYyWlc1MElFbEZJR1p5YjIwZ1ptOWpkWE5wYm1jZ2RHaGxJR1J2WTNWdFpXNTBJRzl5SUVoVVRVd2daV3hsYldWdWRDNWNiaUFnSUNBZ0lHbG1JQ2doYVhOV1lXeHBaRVp2WTNWelZHRnlaMlYwS0dVdWRHRnlaMlYwS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2hvWVdSTFpYbGliMkZ5WkVWMlpXNTBJSHg4SUdadlkzVnpWSEpwWjJkbGNuTkxaWGxpYjJGeVpFMXZaR0ZzYVhSNUtHVXVkR0Z5WjJWMEtTa2dlMXh1SUNBZ0lDQWdJQ0JoWkdSR2IyTjFjMVpwYzJsaWJHVkRiR0Z6Y3lobExuUmhjbWRsZENrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1QyNGdZR0pzZFhKZ0xDQnlaVzF2ZG1VZ2RHaGxJR0JtYjJOMWN5MTJhWE5wWW14bFlDQmpiR0Z6Y3lCbWNtOXRJSFJvWlNCMFlYSm5aWFF1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRGZG1WdWRIMGdaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHWjFibU4wYVc5dUlHOXVRbXgxY2lobEtTQjdYRzRnSUNBZ0lDQnBaaUFvSVdselZtRnNhV1JHYjJOMWMxUmhjbWRsZENobExuUmhjbWRsZENrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUdVdWRHRnlaMlYwTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3lnblptOWpkWE10ZG1semFXSnNaU2NwSUh4OFhHNGdJQ0FnSUNBZ0lHVXVkR0Z5WjJWMExtaGhjMEYwZEhKcFluVjBaU2duWkdGMFlTMW1iMk4xY3kxMmFYTnBZbXhsTFdGa1pHVmtKeWxjYmlBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QlVieUJrWlhSbFkzUWdZU0IwWVdJdmQybHVaRzkzSUhOM2FYUmphQ3dnZDJVZ2JHOXZheUJtYjNJZ1lTQmliSFZ5SUdWMlpXNTBJR1p2Ykd4dmQyVmtYRzRnSUNBZ0lDQWdJQzh2SUhKaGNHbGtiSGtnWW5rZ1lTQjJhWE5wWW1sc2FYUjVJR05vWVc1blpTNWNiaUFnSUNBZ0lDQWdMeThnU1dZZ2QyVWdaRzl1SjNRZ2MyVmxJR0VnZG1semFXSnBiR2wwZVNCamFHRnVaMlVnZDJsMGFHbHVJREV3TUcxekxDQnBkQ2R6SUhCeWIySmhZbXg1SUdGY2JpQWdJQ0FnSUNBZ0x5OGdjbVZuZFd4aGNpQm1iMk4xY3lCamFHRnVaMlV1WEc0Z0lDQWdJQ0FnSUdoaFpFWnZZM1Z6Vm1semFXSnNaVkpsWTJWdWRHeDVJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkMmx1Wkc5M0xtTnNaV0Z5VkdsdFpXOTFkQ2hvWVdSR2IyTjFjMVpwYzJsaWJHVlNaV05sYm5Sc2VWUnBiV1Z2ZFhRcE8xeHVJQ0FnSUNBZ0lDQm9ZV1JHYjJOMWMxWnBjMmxpYkdWU1pXTmxiblJzZVZScGJXVnZkWFFnUFNCM2FXNWtiM2N1YzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0JvWVdSR2IyTjFjMVpwYzJsaWJHVlNaV05sYm5Sc2VTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlMQ0F4TURBcE8xeHVJQ0FnSUNBZ0lDQnlaVzF2ZG1WR2IyTjFjMVpwYzJsaWJHVkRiR0Z6Y3lobExuUmhjbWRsZENrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXWWdkR2hsSUhWelpYSWdZMmhoYm1kbGN5QjBZV0p6TENCclpXVndJSFJ5WVdOcklHOW1JSGRvWlhSb1pYSWdiM0lnYm05MElIUm9aU0J3Y21WMmFXOTFjMng1WEc0Z0lDQWdJQ29nWm05amRYTmxaQ0JsYkdWdFpXNTBJR2hoWkNBdVptOWpkWE10ZG1semFXSnNaUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMFYyWlc1MGZTQmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1puVnVZM1JwYjI0Z2IyNVdhWE5wWW1sc2FYUjVRMmhoYm1kbEtHVXBJSHRjYmlBZ0lDQWdJR2xtSUNoa2IyTjFiV1Z1ZEM1MmFYTnBZbWxzYVhSNVUzUmhkR1VnUFQwOUlDZG9hV1JrWlc0bktTQjdYRzRnSUNBZ0lDQWdJQzh2SUVsbUlIUm9aU0IwWVdJZ1ltVmpiMjFsY3lCaFkzUnBkbVVnWVdkaGFXNHNJSFJvWlNCaWNtOTNjMlZ5SUhkcGJHd2dhR0Z1Wkd4bElHTmhiR3hwYm1jZ1ptOWpkWE5jYmlBZ0lDQWdJQ0FnTHk4Z2IyNGdkR2hsSUdWc1pXMWxiblFnS0ZOaFptRnlhU0JoWTNSMVlXeHNlU0JqWVd4c2N5QnBkQ0IwZDJsalpTa3VYRzRnSUNBZ0lDQWdJQzh2SUVsbUlIUm9hWE1nZEdGaUlHTm9ZVzVuWlNCallYVnpaV1FnWVNCaWJIVnlJRzl1SUdGdUlHVnNaVzFsYm5RZ2QybDBhQ0JtYjJOMWN5MTJhWE5wWW14bExGeHVJQ0FnSUNBZ0lDQXZMeUJ5WlMxaGNIQnNlU0IwYUdVZ1kyeGhjM01nZDJobGJpQjBhR1VnZFhObGNpQnpkMmwwWTJobGN5QmlZV05ySUhSdklIUm9aU0IwWVdJdVhHNGdJQ0FnSUNBZ0lHbG1JQ2hvWVdSR2IyTjFjMVpwYzJsaWJHVlNaV05sYm5Sc2VTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdoaFpFdGxlV0p2WVhKa1JYWmxiblFnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdGa1pFbHVhWFJwWVd4UWIybHVkR1Z5VFc5MlpVeHBjM1JsYm1WeWN5Z3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZrWkNCaElHZHliM1Z3SUc5bUlHeHBjM1JsYm1WeWN5QjBieUJrWlhSbFkzUWdkWE5oWjJVZ2IyWWdZVzU1SUhCdmFXNTBhVzVuSUdSbGRtbGpaWE11WEc0Z0lDQWdJQ29nVkdobGMyVWdiR2x6ZEdWdVpYSnpJSGRwYkd3Z1ltVWdZV1JrWldRZ2QyaGxiaUIwYUdVZ2NHOXNlV1pwYkd3Z1ptbHljM1FnYkc5aFpITXNJR0Z1WkNCaGJubDBhVzFsWEc0Z0lDQWdJQ29nZEdobElIZHBibVJ2ZHlCcGN5QmliSFZ5Y21Wa0xDQnpieUIwYUdGMElIUm9aWGtnWVhKbElHRmpkR2wyWlNCM2FHVnVJSFJvWlNCM2FXNWtiM2NnY21WbllXbHVjMXh1SUNBZ0lDQXFJR1p2WTNWekxseHVJQ0FnSUNBcUwxeHVJQ0FnSUdaMWJtTjBhVzl1SUdGa1pFbHVhWFJwWVd4UWIybHVkR1Z5VFc5MlpVeHBjM1JsYm1WeWN5Z3BJSHRjYmlBZ0lDQWdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMjF2ZFhObGJXOTJaU2NzSUc5dVNXNXBkR2xoYkZCdmFXNTBaWEpOYjNabEtUdGNiaUFnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sWkc5M2JpY3NJRzl1U1c1cGRHbGhiRkJ2YVc1MFpYSk5iM1psS1R0Y2JpQWdJQ0FnSUdSdlkzVnRaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjIxdmRYTmxkWEFuTENCdmJrbHVhWFJwWVd4UWIybHVkR1Z5VFc5MlpTazdYRzRnSUNBZ0lDQmtiMk4xYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHdiMmx1ZEdWeWJXOTJaU2NzSUc5dVNXNXBkR2xoYkZCdmFXNTBaWEpOYjNabEtUdGNiaUFnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozQnZhVzUwWlhKa2IzZHVKeXdnYjI1SmJtbDBhV0ZzVUc5cGJuUmxjazF2ZG1VcE8xeHVJQ0FnSUNBZ1pHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmNHOXBiblJsY25Wd0p5d2diMjVKYm1sMGFXRnNVRzlwYm5SbGNrMXZkbVVwTzF4dUlDQWdJQ0FnWkc5amRXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduZEc5MVkyaHRiM1psSnl3Z2IyNUpibWwwYVdGc1VHOXBiblJsY2sxdmRtVXBPMXh1SUNBZ0lDQWdaRzlqZFcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25kRzkxWTJoemRHRnlkQ2NzSUc5dVNXNXBkR2xoYkZCdmFXNTBaWEpOYjNabEtUdGNiaUFnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vWlc1a0p5d2diMjVKYm1sMGFXRnNVRzlwYm5SbGNrMXZkbVVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR1oxYm1OMGFXOXVJSEpsYlc5MlpVbHVhWFJwWVd4UWIybHVkR1Z5VFc5MlpVeHBjM1JsYm1WeWN5Z3BJSHRjYmlBZ0lDQWdJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjIxdmRYTmxiVzkyWlNjc0lHOXVTVzVwZEdsaGJGQnZhVzUwWlhKTmIzWmxLVHRjYmlBZ0lDQWdJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjIxdmRYTmxaRzkzYmljc0lHOXVTVzVwZEdsaGJGQnZhVzUwWlhKTmIzWmxLVHRjYmlBZ0lDQWdJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjIxdmRYTmxkWEFuTENCdmJrbHVhWFJwWVd4UWIybHVkR1Z5VFc5MlpTazdYRzRnSUNBZ0lDQmtiMk4xYldWdWRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2R3YjJsdWRHVnliVzkyWlNjc0lHOXVTVzVwZEdsaGJGQnZhVzUwWlhKTmIzWmxLVHRjYmlBZ0lDQWdJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNCdmFXNTBaWEprYjNkdUp5d2diMjVKYm1sMGFXRnNVRzlwYm5SbGNrMXZkbVVwTzF4dUlDQWdJQ0FnWkc5amRXMWxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmNHOXBiblJsY25Wd0p5d2diMjVKYm1sMGFXRnNVRzlwYm5SbGNrMXZkbVVwTzF4dUlDQWdJQ0FnWkc5amRXMWxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmRHOTFZMmh0YjNabEp5d2diMjVKYm1sMGFXRnNVRzlwYm5SbGNrMXZkbVVwTzF4dUlDQWdJQ0FnWkc5amRXMWxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmRHOTFZMmh6ZEdGeWRDY3NJRzl1U1c1cGRHbGhiRkJ2YVc1MFpYSk5iM1psS1R0Y2JpQWdJQ0FnSUdSdlkzVnRaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vWlc1a0p5d2diMjVKYm1sMGFXRnNVRzlwYm5SbGNrMXZkbVVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZkb1pXNGdkR2hsSUhCdmJHWjVhV3hzSUdacGNuTjBJR3h2WVdSekxDQmhjM04xYldVZ2RHaGxJSFZ6WlhJZ2FYTWdhVzRnYTJWNVltOWhjbVFnYlc5a1lXeHBkSGt1WEc0Z0lDQWdJQ29nU1dZZ1lXNTVJR1YyWlc1MElHbHpJSEpsWTJWcGRtVmtJR1p5YjIwZ1lTQndiMmx1ZEdsdVp5QmtaWFpwWTJVZ0tHVXVaeTRnYlc5MWMyVXNJSEJ2YVc1MFpYSXNYRzRnSUNBZ0lDb2dkRzkxWTJncExDQjBkWEp1SUc5bVppQnJaWGxpYjJGeVpDQnRiMlJoYkdsMGVTNWNiaUFnSUNBZ0tpQlVhR2x6SUdGalkyOTFiblJ6SUdadmNpQnphWFIxWVhScGIyNXpJSGRvWlhKbElHWnZZM1Z6SUdWdWRHVnljeUIwYUdVZ2NHRm5aU0JtY205dElIUm9aU0JWVWt3Z1ltRnlMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdSWFpsYm5SOUlHVmNiaUFnSUNBZ0tpOWNiaUFnSUNCbWRXNWpkR2x2YmlCdmJrbHVhWFJwWVd4UWIybHVkR1Z5VFc5MlpTaGxLU0I3WEc0Z0lDQWdJQ0F2THlCWGIzSnJJR0Z5YjNWdVpDQmhJRk5oWm1GeWFTQnhkV2x5YXlCMGFHRjBJR1pwY21WeklHRWdiVzkxYzJWdGIzWmxJRzl1SUR4b2RHMXNQaUIzYUdWdVpYWmxjaUIwYUdWY2JpQWdJQ0FnSUM4dklIZHBibVJ2ZHlCaWJIVnljeXdnWlhabGJpQnBaaUI1YjNVbmNtVWdkR0ZpWW1sdVp5QnZkWFFnYjJZZ2RHaGxJSEJoWjJVdUlNS3ZYRnhmS09PRGhDbGZMOEt2WEc0Z0lDQWdJQ0JwWmlBb1pTNTBZWEpuWlhRdWJtOWtaVTVoYldVZ0ppWWdaUzUwWVhKblpYUXVibTlrWlU1aGJXVXVkRzlNYjNkbGNrTmhjMlVvS1NBOVBUMGdKMmgwYld3bktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhR0ZrUzJWNVltOWhjbVJGZG1WdWRDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ2NtVnRiM1psU1c1cGRHbGhiRkJ2YVc1MFpYSk5iM1psVEdsemRHVnVaWEp6S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1JtOXlJSE52YldVZ2EybHVaSE1nYjJZZ2MzUmhkR1VzSUhkbElHRnlaU0JwYm5SbGNtVnpkR1ZrSUdsdUlHTm9ZVzVuWlhNZ1lYUWdkR2hsSUdkc2IySmhiQ0J6WTI5d1pWeHVJQ0FnSUM4dklHOXViSGt1SUVadmNpQmxlR0Z0Y0d4bExDQm5iRzlpWVd3Z2NHOXBiblJsY2lCcGJuQjFkQ3dnWjJ4dlltRnNJR3RsZVNCd2NtVnpjMlZ6SUdGdVpDQm5iRzlpWVd4Y2JpQWdJQ0F2THlCMmFYTnBZbWxzYVhSNUlHTm9ZVzVuWlNCemFHOTFiR1FnWVdabVpXTjBJSFJvWlNCemRHRjBaU0JoZENCbGRtVnllU0J6WTI5d1pUcGNiaUFnSUNCa2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkclpYbGtiM2R1Snl3Z2IyNUxaWGxFYjNkdUxDQjBjblZsS1R0Y2JpQWdJQ0JrYjJOMWJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R0YjNWelpXUnZkMjRuTENCdmJsQnZhVzUwWlhKRWIzZHVMQ0IwY25WbEtUdGNiaUFnSUNCa2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Nkd2IybHVkR1Z5Wkc5M2JpY3NJRzl1VUc5cGJuUmxja1J2ZDI0c0lIUnlkV1VwTzF4dUlDQWdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM1J2ZFdOb2MzUmhjblFuTENCdmJsQnZhVzUwWlhKRWIzZHVMQ0IwY25WbEtUdGNiaUFnSUNCa2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkMmFYTnBZbWxzYVhSNVkyaGhibWRsSnl3Z2IyNVdhWE5wWW1sc2FYUjVRMmhoYm1kbExDQjBjblZsS1R0Y2JseHVJQ0FnSUdGa1pFbHVhWFJwWVd4UWIybHVkR1Z5VFc5MlpVeHBjM1JsYm1WeWN5Z3BPMXh1WEc0Z0lDQWdMeThnUm05eUlHWnZZM1Z6SUdGdVpDQmliSFZ5TENCM1pTQnpjR1ZqYVdacFkyRnNiSGtnWTJGeVpTQmhZbTkxZENCemRHRjBaU0JqYUdGdVoyVnpJR2x1SUhSb1pTQnNiMk5oYkZ4dUlDQWdJQzh2SUhOamIzQmxMaUJVYUdseklHbHpJR0psWTJGMWMyVWdabTlqZFhNZ0x5QmliSFZ5SUdWMlpXNTBjeUIwYUdGMElHOXlhV2RwYm1GMFpTQm1jbTl0SUhkcGRHaHBiaUJoWEc0Z0lDQWdMeThnYzJoaFpHOTNJSEp2YjNRZ1lYSmxJRzV2ZENCeVpTMWthWE53WVhSamFHVmtJR1p5YjIwZ2RHaGxJR2h2YzNRZ1pXeGxiV1Z1ZENCcFppQnBkQ0IzWVhNZ1lXeHlaV0ZrZVZ4dUlDQWdJQzh2SUhSb1pTQmhZM1JwZG1VZ1pXeGxiV1Z1ZENCcGJpQnBkSE1nYjNkdUlITmpiM0JsT2x4dUlDQWdJSE5qYjNCbExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyWnZZM1Z6Snl3Z2IyNUdiMk4xY3l3Z2RISjFaU2s3WEc0Z0lDQWdjMk52Y0dVdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbllteDFjaWNzSUc5dVFteDFjaXdnZEhKMVpTazdYRzVjYmlBZ0lDQXZMeUJYWlNCa1pYUmxZM1FnZEdoaGRDQmhJRzV2WkdVZ2FYTWdZU0JUYUdGa2IzZFNiMjkwSUdKNUlHVnVjM1Z5YVc1bklIUm9ZWFFnYVhRZ2FYTWdZVnh1SUNBZ0lDOHZJRVJ2WTNWdFpXNTBSbkpoWjIxbGJuUWdZVzVrSUdGc2MyOGdhR0Z6SUdFZ2FHOXpkQ0J3Y205d1pYSjBlUzRnVkdocGN5QmphR1ZqYXlCamIzWmxjbk1nYm1GMGFYWmxYRzRnSUNBZ0x5OGdhVzF3YkdWdFpXNTBZWFJwYjI0Z1lXNWtJSEJ2YkhsbWFXeHNJR2x0Y0d4bGJXVnVkR0YwYVc5dUlIUnlZVzV6Y0dGeVpXNTBiSGt1SUVsbUlIZGxJRzl1YkhrZ1kyRnlaV1JjYmlBZ0lDQXZMeUJoWW05MWRDQjBhR1VnYm1GMGFYWmxJR2x0Y0d4bGJXVnVkR0YwYVc5dUxDQjNaU0JqYjNWc1pDQnFkWE4wSUdOb1pXTnJJR2xtSUhSb1pTQnpZMjl3WlNCM1lYTmNiaUFnSUNBdkx5QmhiaUJwYm5OMFlXNWpaU0J2WmlCaElGTm9ZV1J2ZDFKdmIzUXVYRzRnSUNBZ2FXWWdLSE5qYjNCbExtNXZaR1ZVZVhCbElEMDlQU0JPYjJSbExrUlBRMVZOUlU1VVgwWlNRVWROUlU1VVgwNVBSRVVnSmlZZ2MyTnZjR1V1YUc5emRDa2dlMXh1SUNBZ0lDQWdMeThnVTJsdVkyVWdZU0JUYUdGa2IzZFNiMjkwSUdseklHRWdjM0JsWTJsaGJDQnJhVzVrSUc5bUlFUnZZM1Z0Wlc1MFJuSmhaMjFsYm5Rc0lHbDBJR1J2WlhNZ2JtOTBYRzRnSUNBZ0lDQXZMeUJvWVhabElHRWdjbTl2ZENCbGJHVnRaVzUwSUhSdklHRmtaQ0JoSUdOc1lYTnpJSFJ2TGlCVGJ5d2dkMlVnWVdSa0lIUm9hWE1nWVhSMGNtbGlkWFJsSUhSdklIUm9aVnh1SUNBZ0lDQWdMeThnYUc5emRDQmxiR1Z0Wlc1MElHbHVjM1JsWVdRNlhHNGdJQ0FnSUNCelkyOXdaUzVvYjNOMExuTmxkRUYwZEhKcFluVjBaU2duWkdGMFlTMXFjeTFtYjJOMWN5MTJhWE5wWW14bEp5d2dKeWNwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYzJOdmNHVXVibTlrWlZSNWNHVWdQVDA5SUU1dlpHVXVSRTlEVlUxRlRsUmZUazlFUlNrZ2UxeHVJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMnB6TFdadlkzVnpMWFpwYzJsaWJHVW5LVHRjYmlBZ0lDQWdJR1J2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRDNXpaWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRhbk10Wm05amRYTXRkbWx6YVdKc1pTY3NJQ2NuS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkx5QkpkQ0JwY3lCcGJYQnZjblJoYm5RZ2RHOGdkM0poY0NCaGJHd2djbVZtWlhKbGJtTmxjeUIwYnlCbmJHOWlZV3dnZDJsdVpHOTNJR0Z1WkNCa2IyTjFiV1Z1ZENCcGJseHVJQ0F2THlCMGFHVnpaU0JqYUdWamEzTWdkRzhnYzNWd2NHOXlkQ0J6WlhKMlpYSXRjMmxrWlNCeVpXNWtaWEpwYm1jZ2RYTmxJR05oYzJWelhHNGdJQzh2SUVCelpXVWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMWRKUTBjdlptOWpkWE10ZG1semFXSnNaUzlwYzNOMVpYTXZNVGs1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdkMmx1Wkc5M0lDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQjBlWEJsYjJZZ1pHOWpkVzFsYm5RZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnTHk4Z1RXRnJaU0IwYUdVZ2NHOXNlV1pwYkd3Z2FHVnNjR1Z5SUdkc2IySmhiR3g1SUdGMllXbHNZV0pzWlM0Z1ZHaHBjeUJqWVc0Z1ltVWdkWE5sWkNCaGN5QmhJSE5wWjI1aGJGeHVJQ0FnSUM4dklIUnZJR2x1ZEdWeVpYTjBaV1FnYkdsaWNtRnlhV1Z6SUhSb1lYUWdkMmx6YUNCMGJ5QmpiMjl5WkdsdVlYUmxJSGRwZEdnZ2RHaGxJSEJ2YkhsbWFXeHNJR1p2Y2lCbExtY3VMRnh1SUNBZ0lDOHZJR0Z3Y0d4NWFXNW5JSFJvWlNCd2IyeDVabWxzYkNCMGJ5QmhJSE5vWVdSdmR5QnliMjkwT2x4dUlDQWdJSGRwYm1SdmR5NWhjSEJzZVVadlkzVnpWbWx6YVdKc1pWQnZiSGxtYVd4c0lEMGdZWEJ3YkhsR2IyTjFjMVpwYzJsaWJHVlFiMng1Wm1sc2JEdGNibHh1SUNBZ0lDOHZJRTV2ZEdsbWVTQnBiblJsY21WemRHVmtJR3hwWW5KaGNtbGxjeUJ2WmlCMGFHVWdjRzlzZVdacGJHd25jeUJ3Y21WelpXNWpaU3dnYVc0Z1kyRnpaU0IwYUdWY2JpQWdJQ0F2THlCd2IyeDVabWxzYkNCM1lYTWdiRzloWkdWa0lHeGhlbWxzZVRwY2JpQWdJQ0IyWVhJZ1pYWmxiblE3WEc1Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ1pYWmxiblFnUFNCdVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjJadlkzVnpMWFpwYzJsaWJHVXRjRzlzZVdacGJHd3RjbVZoWkhrbktUdGNiaUFnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnTHk4Z1NVVXhNU0JrYjJWeklHNXZkQ0J6ZFhCd2IzSjBJSFZ6YVc1bklFTjFjM1J2YlVWMlpXNTBJR0Z6SUdFZ1kyOXVjM1J5ZFdOMGIzSWdaR2x5WldOMGJIazZYRzRnSUNBZ0lDQmxkbVZ1ZENBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWMlpXNTBLQ2REZFhOMGIyMUZkbVZ1ZENjcE8xeHVJQ0FnSUNBZ1pYWmxiblF1YVc1cGRFTjFjM1J2YlVWMlpXNTBLQ2RtYjJOMWN5MTJhWE5wWW14bExYQnZiSGxtYVd4c0xYSmxZV1I1Snl3Z1ptRnNjMlVzSUdaaGJITmxMQ0I3ZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZDJsdVpHOTNMbVJwYzNCaGRHTm9SWFpsYm5Rb1pYWmxiblFwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQmtiMk4xYldWdWRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBdkx5QkJjSEJzZVNCMGFHVWdjRzlzZVdacGJHd2dkRzhnZEdobElHZHNiMkpoYkNCa2IyTjFiV1Z1ZEN3Z2MyOGdkR2hoZENCdWJ5QktZWFpoVTJOeWFYQjBYRzRnSUNBZ0x5OGdZMjl2Y21ScGJtRjBhVzl1SUdseklISmxjWFZwY21Wa0lIUnZJSFZ6WlNCMGFHVWdjRzlzZVdacGJHd2dhVzRnZEdobElIUnZjQzFzWlhabGJDQmtiMk4xYldWdWREcGNiaUFnSUNCaGNIQnNlVVp2WTNWelZtbHphV0pzWlZCdmJIbG1hV3hzS0dSdlkzVnRaVzUwS1R0Y2JpQWdmVnh1WEc1OUtTa3BPMXh1SWl3aUlXWjFibU4wYVc5dUtIUXNiaWw3WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUdWNGNHOXlkSE1tSmx3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQnRiMlIxYkdVL2JXOWtkV3hsTG1WNGNHOXlkSE05YmlncE9sd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR1JsWm1sdVpTWW1aR1ZtYVc1bExtRnRaRDlrWldacGJtVW9iaWs2S0hROVhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JR2RzYjJKaGJGUm9hWE0vWjJ4dlltRnNWR2hwY3pwMGZIeHpaV3htS1M1TVlYcDVURzloWkQxdUtDbDlLSFJvYVhNc0tHWjFibU4wYVc5dUtDbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2RDZ3BlM0psZEhWeWJpaDBQVTlpYW1WamRDNWhjM05wWjI1OGZHWjFibU4wYVc5dUtIUXBlMlp2Y2loMllYSWdiajB4TzI0OFlYSm5kVzFsYm5SekxteGxibWQwYUR0dUt5c3BlM1poY2lCbFBXRnlaM1Z0Wlc1MGMxdHVYVHRtYjNJb2RtRnlJR2tnYVc0Z1pTbFBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29aU3hwS1NZbUtIUmJhVjA5WlZ0cFhTbDljbVYwZFhKdUlIUjlLUzVoY0hCc2VTaDBhR2x6TEdGeVozVnRaVzUwY3lsOWRtRnlJRzQ5WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlIZHBibVJ2ZHl4bFBXNG1KaUVvWENKdmJuTmpjbTlzYkZ3aWFXNGdkMmx1Wkc5M0tYeDhYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUc1aGRtbG5ZWFJ2Y2lZbUx5aG5iR1Y4YVc1bmZISnZLV0p2ZEh4amNtRjNiSHh6Y0dsa1pYSXZhUzUwWlhOMEtHNWhkbWxuWVhSdmNpNTFjMlZ5UVdkbGJuUXBMR2s5YmlZbVhDSkpiblJsY25ObFkzUnBiMjVQWW5ObGNuWmxjbHdpYVc0Z2QybHVaRzkzTEc4OWJpWW1YQ0pqYkdGemMweHBjM1JjSW1sdUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvWENKd1hDSXBMSEk5YmlZbWQybHVaRzkzTG1SbGRtbGpaVkJwZUdWc1VtRjBhVzgrTVN4aFBYdGxiR1Z0Wlc1MGMxOXpaV3hsWTNSdmNqcGNJaTVzWVhwNVhDSXNZMjl1ZEdGcGJtVnlPbVY4Zkc0L1pHOWpkVzFsYm5RNmJuVnNiQ3gwYUhKbGMyaHZiR1E2TXpBd0xIUm9jbVZ6YUc5c1pITTZiblZzYkN4a1lYUmhYM055WXpwY0luTnlZMXdpTEdSaGRHRmZjM0pqYzJWME9sd2ljM0pqYzJWMFhDSXNaR0YwWVY5emFYcGxjenBjSW5OcGVtVnpYQ0lzWkdGMFlWOWlaenBjSW1KblhDSXNaR0YwWVY5aVoxOW9hV1J3YVRwY0ltSm5MV2hwWkhCcFhDSXNaR0YwWVY5aVoxOXRkV3gwYVRwY0ltSm5MVzExYkhScFhDSXNaR0YwWVY5aVoxOXRkV3gwYVY5b2FXUndhVHBjSW1KbkxXMTFiSFJwTFdocFpIQnBYQ0lzWkdGMFlWOXdiM04wWlhJNlhDSndiM04wWlhKY0lpeGpiR0Z6YzE5aGNIQnNhV1ZrT2x3aVlYQndiR2xsWkZ3aUxHTnNZWE56WDJ4dllXUnBibWM2WENKc2IyRmthVzVuWENJc1kyeGhjM05mYkc5aFpHVmtPbHdpYkc5aFpHVmtYQ0lzWTJ4aGMzTmZaWEp5YjNJNlhDSmxjbkp2Y2x3aUxHTnNZWE56WDJWdWRHVnlaV1E2WENKbGJuUmxjbVZrWENJc1kyeGhjM05mWlhocGRHVmtPbHdpWlhocGRHVmtYQ0lzZFc1dlluTmxjblpsWDJOdmJYQnNaWFJsWkRvaE1DeDFibTlpYzJWeWRtVmZaVzUwWlhKbFpEb2hNU3hqWVc1alpXeGZiMjVmWlhocGREb2hNQ3hqWVd4c1ltRmphMTlsYm5SbGNqcHVkV3hzTEdOaGJHeGlZV05yWDJWNGFYUTZiblZzYkN4allXeHNZbUZqYTE5aGNIQnNhV1ZrT201MWJHd3NZMkZzYkdKaFkydGZiRzloWkdsdVp6cHVkV3hzTEdOaGJHeGlZV05yWDJ4dllXUmxaRHB1ZFd4c0xHTmhiR3hpWVdOclgyVnljbTl5T201MWJHd3NZMkZzYkdKaFkydGZabWx1YVhOb09tNTFiR3dzWTJGc2JHSmhZMnRmWTJGdVkyVnNPbTUxYkd3c2RYTmxYMjVoZEdsMlpUb2hNWDBzWXoxbWRXNWpkR2x2YmlodUtYdHlaWFIxY200Z2RDaDdmU3hoTEc0cGZTeHpQV1oxYm1OMGFXOXVLSFFzYmlsN2RtRnlJR1VzYVQxY0lreGhlbmxNYjJGa09qcEpibWwwYVdGc2FYcGxaRndpTEc4OWJtVjNJSFFvYmlrN2RISjVlMlU5Ym1WM0lFTjFjM1J2YlVWMlpXNTBLR2tzZTJSbGRHRnBiRHA3YVc1emRHRnVZMlU2YjMxOUtYMWpZWFJqYUNoMEtYc29aVDFrYjJOMWJXVnVkQzVqY21WaGRHVkZkbVZ1ZENoY0lrTjFjM1J2YlVWMlpXNTBYQ0lwS1M1cGJtbDBRM1Z6ZEc5dFJYWmxiblFvYVN3aE1Td2hNU3g3YVc1emRHRnVZMlU2YjMwcGZYZHBibVJ2ZHk1a2FYTndZWFJqYUVWMlpXNTBLR1VwZlN4c1BWd2liRzloWkdsdVoxd2lMSFU5WENKc2IyRmtaV1JjSWl4a1BWd2lZWEJ3YkdsbFpGd2lMR1k5WENKbGNuSnZjbHdpTEY4OVhDSnVZWFJwZG1WY0lpeG5QVndpWkdGMFlTMWNJaXgyUFZ3aWJHd3RjM1JoZEhWelhDSXNZajFtZFc1amRHbHZiaWgwTEc0cGUzSmxkSFZ5YmlCMExtZGxkRUYwZEhKcFluVjBaU2huSzI0cGZTeHdQV1oxYm1OMGFXOXVLSFFwZTNKbGRIVnliaUJpS0hRc2RpbDlMR2c5Wm5WdVkzUnBiMjRvZEN4dUtYdHlaWFIxY200Z1puVnVZM1JwYjI0b2RDeHVMR1VwZTNaaGNpQnBQVndpWkdGMFlTMXNiQzF6ZEdGMGRYTmNJanR1ZFd4c0lUMDlaVDkwTG5ObGRFRjBkSEpwWW5WMFpTaHBMR1VwT25RdWNtVnRiM1psUVhSMGNtbGlkWFJsS0drcGZTaDBMREFzYmlsOUxHMDlablZ1WTNScGIyNG9kQ2w3Y21WMGRYSnVJR2dvZEN4dWRXeHNLWDBzUlQxbWRXNWpkR2x2YmloMEtYdHlaWFIxY200Z2JuVnNiRDA5UFhBb2RDbDlMSGs5Wm5WdVkzUnBiMjRvZENsN2NtVjBkWEp1SUhBb2RDazlQVDFmZlN4SlBWdHNMSFVzWkN4bVhTeEJQV1oxYm1OMGFXOXVLSFFzYml4bExHa3BlM1FtSmloMmIybGtJREE5UFQxcFAzWnZhV1FnTUQwOVBXVS9kQ2h1S1RwMEtHNHNaU2s2ZENodUxHVXNhU2twZlN4TVBXWjFibU4wYVc5dUtIUXNiaWw3Yno5MExtTnNZWE56VEdsemRDNWhaR1FvYmlrNmRDNWpiR0Z6YzA1aGJXVXJQU2gwTG1Oc1lYTnpUbUZ0WlQ5Y0lpQmNJanBjSWx3aUtTdHVmU3gzUFdaMWJtTjBhVzl1S0hRc2JpbDdiejkwTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvYmlrNmRDNWpiR0Z6YzA1aGJXVTlkQzVqYkdGemMwNWhiV1V1Y21Wd2JHRmpaU2h1WlhjZ1VtVm5SWGh3S0Z3aUtGNThYRnhjWEhNcktWd2lLMjRyWENJb1hGeGNYSE1yZkNRcFhDSXBMRndpSUZ3aUtTNXlaWEJzWVdObEtDOWVYRnh6S3k4c1hDSmNJaWt1Y21Wd2JHRmpaU2d2WEZ4ekt5UXZMRndpWENJcGZTeHJQV1oxYm1OMGFXOXVLSFFwZTNKbGRIVnliaUIwTG14c1ZHVnRjRWx0WVdkbGZTeFBQV1oxYm1OMGFXOXVLSFFzYmlsN2FXWW9iaWw3ZG1GeUlHVTliaTVmYjJKelpYSjJaWEk3WlNZbVpTNTFibTlpYzJWeWRtVW9kQ2w5ZlN4NFBXWjFibU4wYVc5dUtIUXNiaWw3ZENZbUtIUXViRzloWkdsdVowTnZkVzUwS3oxdUtYMHNlajFtZFc1amRHbHZiaWgwTEc0cGUzUW1KaWgwTG5SdlRHOWhaRU52ZFc1MFBXNHBmU3hEUFdaMWJtTjBhVzl1S0hRcGUyWnZjaWgyWVhJZ2JpeGxQVnRkTEdrOU1EdHVQWFF1WTJocGJHUnlaVzViYVYwN2FTczlNU2xjSWxOUFZWSkRSVndpUFQwOWJpNTBZV2RPWVcxbEppWmxMbkIxYzJnb2JpazdjbVYwZFhKdUlHVjlMRTQ5Wm5WdVkzUnBiMjRvZEN4dUxHVXBlMlVtSm5RdWMyVjBRWFIwY21saWRYUmxLRzRzWlNsOUxFMDlablZ1WTNScGIyNG9kQ3h1S1h0MExuSmxiVzkyWlVGMGRISnBZblYwWlNodUtYMHNVajFtZFc1amRHbHZiaWgwS1h0eVpYUjFjbTRoSVhRdWJHeFBjbWxuYVc1aGJFRjBkSEp6ZlN4VVBXWjFibU4wYVc5dUtIUXBlMmxtS0NGU0tIUXBLWHQyWVhJZ2JqMTdmVHR1TG5OeVl6MTBMbWRsZEVGMGRISnBZblYwWlNoY0luTnlZMXdpS1N4dUxuTnlZM05sZEQxMExtZGxkRUYwZEhKcFluVjBaU2hjSW5OeVkzTmxkRndpS1N4dUxuTnBlbVZ6UFhRdVoyVjBRWFIwY21saWRYUmxLRndpYzJsNlpYTmNJaWtzZEM1c2JFOXlhV2RwYm1Gc1FYUjBjbk05Ym4xOUxFYzlablZ1WTNScGIyNG9kQ2w3YVdZb1VpaDBLU2w3ZG1GeUlHNDlkQzVzYkU5eWFXZHBibUZzUVhSMGNuTTdUaWgwTEZ3aWMzSmpYQ0lzYmk1emNtTXBMRTRvZEN4Y0luTnlZM05sZEZ3aUxHNHVjM0pqYzJWMEtTeE9LSFFzWENKemFYcGxjMXdpTEc0dWMybDZaWE1wZlgwc1JEMW1kVzVqZEdsdmJpaDBMRzRwZTA0b2RDeGNJbk5wZW1WelhDSXNZaWgwTEc0dVpHRjBZVjl6YVhwbGN5a3BMRTRvZEN4Y0luTnlZM05sZEZ3aUxHSW9kQ3h1TG1SaGRHRmZjM0pqYzJWMEtTa3NUaWgwTEZ3aWMzSmpYQ0lzWWloMExHNHVaR0YwWVY5emNtTXBLWDBzVmoxbWRXNWpkR2x2YmloMEtYdE5LSFFzWENKemNtTmNJaWtzVFNoMExGd2ljM0pqYzJWMFhDSXBMRTBvZEN4Y0luTnBlbVZ6WENJcGZTeHFQV1oxYm1OMGFXOXVLSFFzYmlsN2RtRnlJR1U5ZEM1d1lYSmxiblJPYjJSbE8yVW1KbHdpVUVsRFZGVlNSVndpUFQwOVpTNTBZV2RPWVcxbEppWkRLR1VwTG1admNrVmhZMmdvYmlsOUxFWTllMGxOUnpwbWRXNWpkR2x2YmloMExHNHBlMm9vZEN3b1puVnVZM1JwYjI0b2RDbDdWQ2gwS1N4RUtIUXNiaWw5S1Nrc1ZDaDBLU3hFS0hRc2JpbDlMRWxHVWtGTlJUcG1kVzVqZEdsdmJpaDBMRzRwZTA0b2RDeGNJbk55WTF3aUxHSW9kQ3h1TG1SaGRHRmZjM0pqS1NsOUxGWkpSRVZQT21aMWJtTjBhVzl1S0hRc2JpbDdJV1oxYm1OMGFXOXVLSFFzWlNsN1F5aDBLUzVtYjNKRllXTm9LQ2htZFc1amRHbHZiaWgwS1h0T0tIUXNYQ0p6Y21OY0lpeGlLSFFzYmk1a1lYUmhYM055WXlrcGZTa3BmU2gwS1N4T0tIUXNYQ0p3YjNOMFpYSmNJaXhpS0hRc2JpNWtZWFJoWDNCdmMzUmxjaWtwTEU0b2RDeGNJbk55WTF3aUxHSW9kQ3h1TG1SaGRHRmZjM0pqS1Nrc2RDNXNiMkZrS0NsOWZTeFFQV1oxYm1OMGFXOXVLSFFzYmlsN2RtRnlJR1U5Umx0MExuUmhaMDVoYldWZE8yVW1KbVVvZEN4dUtYMHNVejFtZFc1amRHbHZiaWgwTEc0c1pTbDdlQ2hsTERFcExFd29kQ3h1TG1Oc1lYTnpYMnh2WVdScGJtY3BMR2dvZEN4c0tTeEJLRzR1WTJGc2JHSmhZMnRmYkc5aFpHbHVaeXgwTEdVcGZTeFZQVnRjSWtsTlIxd2lMRndpU1VaU1FVMUZYQ0lzWENKV1NVUkZUMXdpWFN3a1BXWjFibU4wYVc5dUtIUXNiaWw3SVc1OGZHWjFibU4wYVc5dUtIUXBlM0psZEhWeWJpQjBMbXh2WVdScGJtZERiM1Z1ZEQ0d2ZTaHVLWHg4Wm5WdVkzUnBiMjRvZENsN2NtVjBkWEp1SUhRdWRHOU1iMkZrUTI5MWJuUStNSDBvYmlsOGZFRW9kQzVqWVd4c1ltRmphMTltYVc1cGMyZ3NiaWw5TEhFOVpuVnVZM1JwYjI0b2RDeHVMR1VwZTNRdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lodUxHVXBMSFF1Ykd4RmRreHBjMjV5YzF0dVhUMWxmU3hJUFdaMWJtTjBhVzl1S0hRc2JpeGxLWHQwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb2JpeGxLWDBzUWoxbWRXNWpkR2x2YmloMEtYdHlaWFIxY200aElYUXViR3hGZGt4cGMyNXljMzBzU2oxbWRXNWpkR2x2YmloMEtYdHBaaWhDS0hRcEtYdDJZWElnYmoxMExteHNSWFpNYVhOdWNuTTdabTl5S0haaGNpQmxJR2x1SUc0cGUzWmhjaUJwUFc1YlpWMDdTQ2gwTEdVc2FTbDlaR1ZzWlhSbElIUXViR3hGZGt4cGMyNXljMzE5TEVzOVpuVnVZM1JwYjI0b2RDeHVMR1VwZXlGbWRXNWpkR2x2YmloMEtYdGtaV3hsZEdVZ2RDNXNiRlJsYlhCSmJXRm5aWDBvZENrc2VDaGxMQzB4S1N4bWRXNWpkR2x2YmloMEtYdDBKaVlvZEM1MGIweHZZV1JEYjNWdWRDMDlNU2w5S0dVcExIY29kQ3h1TG1Oc1lYTnpYMnh2WVdScGJtY3BMRzR1ZFc1dlluTmxjblpsWDJOdmJYQnNaWFJsWkNZbVR5aDBMR1VwZlN4UlBXWjFibU4wYVc5dUtIUXNiaXhsS1h0MllYSWdhVDFyS0hRcGZIeDBPMElvYVNsOGZHWjFibU4wYVc5dUtIUXNiaXhsS1h0Q0tIUXBmSHdvZEM1c2JFVjJUR2x6Ym5KelBYdDlLVHQyWVhJZ2FUMWNJbFpKUkVWUFhDSTlQVDEwTG5SaFowNWhiV1UvWENKc2IyRmtaV1JrWVhSaFhDSTZYQ0pzYjJGa1hDSTdjU2gwTEdrc2Jpa3NjU2gwTEZ3aVpYSnliM0pjSWl4bEtYMG9hU3dvWm5WdVkzUnBiMjRvYnlsN0lXWjFibU4wYVc5dUtIUXNiaXhsTEdrcGUzWmhjaUJ2UFhrb2JpazdTeWh1TEdVc2FTa3NUQ2h1TEdVdVkyeGhjM05mYkc5aFpHVmtLU3hvS0c0c2RTa3NRU2hsTG1OaGJHeGlZV05yWDJ4dllXUmxaQ3h1TEdrcExHOThmQ1FvWlN4cEtYMG9NQ3gwTEc0c1pTa3NTaWhwS1gwcExDaG1kVzVqZEdsdmJpaHZLWHNoWm5WdVkzUnBiMjRvZEN4dUxHVXNhU2w3ZG1GeUlHODllU2h1S1R0TEtHNHNaU3hwS1N4TUtHNHNaUzVqYkdGemMxOWxjbkp2Y2lrc2FDaHVMR1lwTEVFb1pTNWpZV3hzWW1GamExOWxjbkp2Y2l4dUxHa3BMRzk4ZkNRb1pTeHBLWDBvTUN4MExHNHNaU2tzU2locEtYMHBLWDBzVnoxbWRXNWpkR2x2YmloMExHNHNaU2w3SVdaMWJtTjBhVzl1S0hRcGUzUXViR3hVWlcxd1NXMWhaMlU5Wkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaGNJa2xOUjF3aUtYMG9kQ2tzVVNoMExHNHNaU2tzWm5WdVkzUnBiMjRvZEN4dUxHVXBlM1poY2lCcFBXSW9kQ3h1TG1SaGRHRmZZbWNwTEc4OVlpaDBMRzR1WkdGMFlWOWlaMTlvYVdSd2FTa3NZVDF5SmladlAyODZhVHRoSmlZb2RDNXpkSGxzWlM1aVlXTnJaM0p2ZFc1a1NXMWhaMlU5SjNWeWJDaGNJaWN1WTI5dVkyRjBLR0VzSjF3aUtTY3BMR3NvZENrdWMyVjBRWFIwY21saWRYUmxLRndpYzNKalhDSXNZU2tzVXloMExHNHNaU2twZlNoMExHNHNaU2tzWm5WdVkzUnBiMjRvZEN4dUxHVXBlM1poY2lCcFBXSW9kQ3h1TG1SaGRHRmZZbWRmYlhWc2RHa3BMRzg5WWloMExHNHVaR0YwWVY5aVoxOXRkV3gwYVY5b2FXUndhU2tzWVQxeUppWnZQMjg2YVR0aEppWW9kQzV6ZEhsc1pTNWlZV05yWjNKdmRXNWtTVzFoWjJVOVlTeG1kVzVqZEdsdmJpaDBMRzRzWlNsN1RDaDBMRzR1WTJ4aGMzTmZZWEJ3YkdsbFpDa3NhQ2gwTEdRcExHNHVkVzV2WW5ObGNuWmxYMk52YlhCc1pYUmxaQ1ltVHloMExHNHBMRUVvYmk1allXeHNZbUZqYTE5aGNIQnNhV1ZrTEhRc1pTbDlLSFFzYml4bEtTbDlLSFFzYml4bEtYMHNXRDFtZFc1amRHbHZiaWgwTEc0c1pTbDdJV1oxYm1OMGFXOXVLSFFwZTNKbGRIVnliaUJWTG1sdVpHVjRUMllvZEM1MFlXZE9ZVzFsS1Q0dE1YMG9kQ2svVnloMExHNHNaU2s2Wm5WdVkzUnBiMjRvZEN4dUxHVXBlMUVvZEN4dUxHVXBMRkFvZEN4dUtTeFRLSFFzYml4bEtYMG9kQ3h1TEdVcGZTeFpQVnRjSWtsTlIxd2lMRndpU1VaU1FVMUZYQ0lzWENKV1NVUkZUMXdpWFN4YVBXWjFibU4wYVc5dUtIUXBlM0psZEhWeWJpQjBMblZ6WlY5dVlYUnBkbVVtSmx3aWJHOWhaR2x1WjF3aWFXNGdTRlJOVEVsdFlXZGxSV3hsYldWdWRDNXdjbTkwYjNSNWNHVjlMSFIwUFdaMWJtTjBhVzl1S0hRc2JpeGxLWHQwTG1admNrVmhZMmdvS0daMWJtTjBhVzl1S0hRcGUzSmxkSFZ5YmlCbWRXNWpkR2x2YmloMEtYdHlaWFIxY200Z2RDNXBjMGx1ZEdWeWMyVmpkR2x1WjN4OGRDNXBiblJsY25ObFkzUnBiMjVTWVhScGJ6NHdmU2gwS1Q5bWRXNWpkR2x2YmloMExHNHNaU3hwS1h0MllYSWdiejFtZFc1amRHbHZiaWgwS1h0eVpYUjFjbTRnU1M1cGJtUmxlRTltS0hBb2RDa3BQajB3ZlNoMEtUdG9LSFFzWENKbGJuUmxjbVZrWENJcExFd29kQ3hsTG1Oc1lYTnpYMlZ1ZEdWeVpXUXBMSGNvZEN4bExtTnNZWE56WDJWNGFYUmxaQ2tzWm5WdVkzUnBiMjRvZEN4dUxHVXBlMjR1ZFc1dlluTmxjblpsWDJWdWRHVnlaV1FtSms4b2RDeGxLWDBvZEN4bExHa3BMRUVvWlM1allXeHNZbUZqYTE5bGJuUmxjaXgwTEc0c2FTa3NiM3g4V0NoMExHVXNhU2w5S0hRdWRHRnlaMlYwTEhRc2JpeGxLVHBtZFc1amRHbHZiaWgwTEc0c1pTeHBLWHRGS0hRcGZId29UQ2gwTEdVdVkyeGhjM05mWlhocGRHVmtLU3htZFc1amRHbHZiaWgwTEc0c1pTeHBLWHRsTG1OaGJtTmxiRjl2Ymw5bGVHbDBKaVptZFc1amRHbHZiaWgwS1h0eVpYUjFjbTRnY0NoMEtUMDlQV3g5S0hRcEppWmNJa2xOUjF3aVBUMDlkQzUwWVdkT1lXMWxKaVlvU2loMEtTeG1kVzVqZEdsdmJpaDBLWHRxS0hRc0tHWjFibU4wYVc5dUtIUXBlMVlvZENsOUtTa3NWaWgwS1gwb2RDa3NablZ1WTNScGIyNG9kQ2w3YWloMExDaG1kVzVqZEdsdmJpaDBLWHRIS0hRcGZTa3BMRWNvZENsOUtIUXBMSGNvZEN4bExtTnNZWE56WDJ4dllXUnBibWNwTEhnb2FTd3RNU2tzYlNoMEtTeEJLR1V1WTJGc2JHSmhZMnRmWTJGdVkyVnNMSFFzYml4cEtTbDlLSFFzYml4bExHa3BMRUVvWlM1allXeHNZbUZqYTE5bGVHbDBMSFFzYml4cEtTbDlLSFF1ZEdGeVoyVjBMSFFzYml4bEtYMHBLWDBzYm5ROVpuVnVZM1JwYjI0b2RDbDdjbVYwZFhKdUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tIUXBmU3hsZEQxbWRXNWpkR2x2YmloMEtYdHlaWFIxY200Z2RDNWpiMjUwWVdsdVpYSXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaDBMbVZzWlcxbGJuUnpYM05sYkdWamRHOXlLWDBzYVhROVpuVnVZM1JwYjI0b2RDbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtIUXBlM0psZEhWeWJpQndLSFFwUFQwOVpuMG9kQ2w5TEc5MFBXWjFibU4wYVc5dUtIUXNiaWw3Y21WMGRYSnVJR1oxYm1OMGFXOXVLSFFwZTNKbGRIVnliaUJ1ZENoMEtTNW1hV3gwWlhJb1JTbDlLSFI4ZkdWMEtHNHBLWDBzY25ROVpuVnVZM1JwYjI0b2RDeGxLWHQyWVhJZ2J6MWpLSFFwTzNSb2FYTXVYM05sZEhScGJtZHpQVzhzZEdocGN5NXNiMkZrYVc1blEyOTFiblE5TUN4bWRXNWpkR2x2YmloMExHNHBlMmttSmlGYUtIUXBKaVlvYmk1ZmIySnpaWEoyWlhJOWJtVjNJRWx1ZEdWeWMyVmpkR2x2Yms5aWMyVnlkbVZ5S0NobWRXNWpkR2x2YmlobEtYdDBkQ2hsTEhRc2JpbDlLU3htZFc1amRHbHZiaWgwS1h0eVpYUjFjbTU3Y205dmREcDBMbU52Ym5SaGFXNWxjajA5UFdSdlkzVnRaVzUwUDI1MWJHdzZkQzVqYjI1MFlXbHVaWElzY205dmRFMWhjbWRwYmpwMExuUm9jbVZ6YUc5c1pITjhmSFF1ZEdoeVpYTm9iMnhrSzF3aWNIaGNJbjE5S0hRcEtTbDlLRzhzZEdocGN5a3NablZ1WTNScGIyNG9kQ3hsS1h0dUppWjNhVzVrYjNjdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY0ltOXViR2x1WlZ3aUxDaG1kVzVqZEdsdmJpZ3BleUZtZFc1amRHbHZiaWgwTEc0cGUzWmhjaUJsT3lobFBXVjBLSFFwTEc1MEtHVXBMbVpwYkhSbGNpaHBkQ2twTG1admNrVmhZMmdvS0daMWJtTjBhVzl1S0c0cGUzY29iaXgwTG1Oc1lYTnpYMlZ5Y205eUtTeHRLRzRwZlNrcExHNHVkWEJrWVhSbEtDbDlLSFFzWlNsOUtTbDlLRzhzZEdocGN5a3NkR2hwY3k1MWNHUmhkR1VvWlNsOU8zSmxkSFZ5YmlCeWRDNXdjbTkwYjNSNWNHVTllM1Z3WkdGMFpUcG1kVzVqZEdsdmJpaDBLWHQyWVhJZ2JpeHZMSEk5ZEdocGN5NWZjMlYwZEdsdVozTXNZVDF2ZENoMExISXBPM29vZEdocGN5eGhMbXhsYm1kMGFDa3NJV1VtSm1rL1dpaHlLVDltZFc1amRHbHZiaWgwTEc0c1pTbDdkQzVtYjNKRllXTm9LQ2htZFc1amRHbHZiaWgwS1hzdE1TRTlQVmt1YVc1a1pYaFBaaWgwTG5SaFowNWhiV1VwSmlabWRXNWpkR2x2YmloMExHNHNaU2w3ZEM1elpYUkJkSFJ5YVdKMWRHVW9YQ0pzYjJGa2FXNW5YQ0lzWENKc1lYcDVYQ0lwTEZFb2RDeHVMR1VwTEZBb2RDeHVLU3hvS0hRc1h5bDlLSFFzYml4bEtYMHBLU3g2S0dVc01DbDlLR0VzY2l4MGFHbHpLVG9vYnoxaExHWjFibU4wYVc5dUtIUXBlM1F1WkdselkyOXVibVZqZENncGZTaHVQWFJvYVhNdVgyOWljMlZ5ZG1WeUtTeG1kVzVqZEdsdmJpaDBMRzRwZTI0dVptOXlSV0ZqYUNnb1puVnVZM1JwYjI0b2JpbDdkQzV2WW5ObGNuWmxLRzRwZlNrcGZTaHVMRzhwS1RwMGFHbHpMbXh2WVdSQmJHd29ZU2w5TEdSbGMzUnliM2s2Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbDl2WW5ObGNuWmxjaVltZEdocGN5NWZiMkp6WlhKMlpYSXVaR2x6WTI5dWJtVmpkQ2dwTEdWMEtIUm9hWE11WDNObGRIUnBibWR6S1M1bWIzSkZZV05vS0NobWRXNWpkR2x2YmloMEtYdGtaV3hsZEdVZ2RDNXNiRTl5YVdkcGJtRnNRWFIwY25OOUtTa3NaR1ZzWlhSbElIUm9hWE11WDI5aWMyVnlkbVZ5TEdSbGJHVjBaU0IwYUdsekxsOXpaWFIwYVc1bmN5eGtaV3hsZEdVZ2RHaHBjeTVzYjJGa2FXNW5RMjkxYm5Rc1pHVnNaWFJsSUhSb2FYTXVkRzlNYjJGa1EyOTFiblI5TEd4dllXUkJiR3c2Wm5WdVkzUnBiMjRvZENsN2RtRnlJRzQ5ZEdocGN5eGxQWFJvYVhNdVgzTmxkSFJwYm1kek8yOTBLSFFzWlNrdVptOXlSV0ZqYUNnb1puVnVZM1JwYjI0b2RDbDdUeWgwTEc0cExGZ29kQ3hsTEc0cGZTa3BmWDBzY25RdWJHOWhaRDFtZFc1amRHbHZiaWgwTEc0cGUzWmhjaUJsUFdNb2JpazdXQ2gwTEdVcGZTeHlkQzV5WlhObGRGTjBZWFIxY3oxbWRXNWpkR2x2YmloMEtYdHRLSFFwZlN4dUppWm1kVzVqZEdsdmJpaDBMRzRwZTJsbUtHNHBhV1lvYmk1c1pXNW5kR2dwWm05eUtIWmhjaUJsTEdrOU1EdGxQVzViYVYwN2FTczlNU2x6S0hRc1pTazdaV3h6WlNCektIUXNiaWw5S0hKMExIZHBibVJ2ZHk1c1lYcDVURzloWkU5d2RHbHZibk1wTEhKMGZTa3BPMXh1SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnS0NrZ1BUNGdlMXh1SUNCamIyNXpkQ0JsYkdWdElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblkyRnVkbUZ6SnlrN1hHNGdJR2xtSUNobGJHVnRMbWRsZEVOdmJuUmxlSFFnSmlZZ1pXeGxiUzVuWlhSRGIyNTBaWGgwS0NjeVpDY3BLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHVnNaVzB1ZEc5RVlYUmhWVkpNS0NkcGJXRm5aUzkzWldKd0p5a3VhVzVrWlhoUFppZ25aR0YwWVRwcGJXRm5aUzkzWldKd0p5a2dQVDA5SURBN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUdaaGJITmxPMXh1ZlR0Y2JpSXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDaG1iaWtnUFQ0Z2UxeHVJQ0JwWmlBb1pHOWpkVzFsYm5RdWNtVmhaSGxUZEdGMFpTQTlQVDBnSjJ4dllXUnBibWNuS1NCN1hHNGdJQ0FnWkc5amRXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduUkU5TlEyOXVkR1Z1ZEV4dllXUmxaQ2NzSUdadUtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQm1iaWdwTzF4dUlDQjlYRzU5TzF4dUlpd2lhVzF3YjNKMElGd2labTlqZFhNdGRtbHphV0pzWlZ3aU8xeHVhVzF3YjNKMElHeGhlbmxKYldGblpYTWdabkp2YlNCY0lpNHZiVzlrZFd4bGN5OXNZWHA1U1cxaFoyVnpYQ0k3WEc1cGJYQnZjblFnWkc5amRXMWxiblJTWldGa2VTQm1jbTl0SUZ3aUxpOW9aV3h3WlhKekwyUnZZM1Z0Wlc1MFVtVmhaSGxjSWp0Y2JtbHRjRzl5ZENCY0lpNHZiV1Z1ZFdOeWIzTnpYQ0k3WEc1Y2JtUnZZM1Z0Wlc1MFVtVmhaSGtvS0NrZ1BUNGdlMXh1WEhSc1lYcDVTVzFoWjJWektDazdYRzU5S1R0Y2JsTmpjbTlzYkZKbGRtVmhiQ2dwTG5KbGRtVmhiQ2hjSWk1b1pXRmtiR2x1WlRGY0lpd2dleUJrWld4aGVUb2dOREF3TENCa2FYTjBZVzVqWlRvZ1hDSTFNSEI0WENJZ2ZTazdYRzVUWTNKdmJHeFNaWFpsWVd3b0tTNXlaWFpsWVd3b1hDSXVhR1ZoWkd4cGJtVXlYQ0lzSUhzZ1pHVnNZWGs2SURVd01Dd2daR2x6ZEdGdVkyVTZJRndpTlRCd2VGd2lJSDBwTzF4dVUyTnliMnhzVW1WMlpXRnNLQ2t1Y21WMlpXRnNLRndpTG1obFlXUnNhVzVsTTF3aUxDQjdJR1JsYkdGNU9pQTJNREFzSUdScGMzUmhibU5sT2lCY0lqVXdjSGhjSWlCOUtUdGNibE5qY205c2JGSmxkbVZoYkNncExuSmxkbVZoYkNoY0lpNW9aV0ZrYkdsdVpUUmNJaXdnZXlCa1pXeGhlVG9nTnpBd0xDQmthWE4wWVc1alpUb2dYQ0kxTUhCNFhDSWdmU2s3WEc1VFkzSnZiR3hTWlhabFlXd29LUzV5WlhabFlXd29YQ0l1YUdWaFpHeHBibVUxWENJc0lIc2daR1ZzWVhrNklEZ3dNQ3dnWkdsemRHRnVZMlU2SUZ3aU5UQndlRndpSUgwcE8xeHVVMk55YjJ4c1VtVjJaV0ZzS0NrdWNtVjJaV0ZzS0Z3aUxtaGxZV1JzYVc1bE5sd2lMQ0I3SUdSbGJHRjVPaUE1TURBc0lHUnBjM1JoYm1ObE9pQmNJalV3Y0hoY0lpQjlLVHRjYmx4dVkyOXVjM1FnZEhKcFoyZGxjaUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9YQ0l1WW5WeVoyVnlYQ0lwT3lBdkx5QnZjaUIzYUdGMFpYWmxjaUIwY21sbloyVnljeUIwYUdVZ2RHOW5aMnhsWEc1amIyNXpkQ0JsYkdWdFpXNTBJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGNJaTV1WVhZdGJXVnVkU0JjSWlrN1hHNWpiMjV6ZENCaWIyUjVJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGNJbUp2WkhsY0lpazdYRzVjYm1OdmJuTnZiR1V1Ykc5bktIUnlhV2RuWlhJcE8xeHVYRzUwY21sbloyVnlMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0pqYkdsamExd2lMQ0JtZFc1amRHbHZiaUFvWlNrZ2UxeHVYSFJsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc1Y2RHVnNaVzFsYm5RdVkyeGhjM05NYVhOMExuUnZaMmRzWlNoY0ltRmpkR2wyWlZ3aUtUc2dMeThnYjNJZ2QyaGhkR1YyWlhJZ2VXOTFjaUJoWTNScGRtVWdZMnhoYzNNZ2FYTmNibHgwWW05a2VTNWpiR0Z6YzB4cGMzUXVkRzluWjJ4bEtGd2lZV04wYVhabFhDSXBPeUF2THlCdmNpQjNhR0YwWlhabGNpQjViM1Z5SUdGamRHbDJaU0JqYkdGemN5QnBjMXh1ZlNrN1hHNWNibU52Ym5OMElISmxabk1nUFNCN1hHNWNkRzl3Wlc1TmIyUmhiRUowYmpvZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWhjSWx0a1lYUmhMVzl3Wlc0dGJXOWtZV3hkWENJcExGeHVYSFJqYkc5elpVMXZaR0ZzUW5SdU9pQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aVcyUmhkR0V0WTJ4dmMyVXRiVzlrWVd4ZFhDSXBMRnh1WEhSaVlXTnJaSEp2Y0RvZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWhjSWx0a1lYUmhMV0poWTJ0a2NtOXdYVndpS1N4Y2JuMDdYRzVjYm5KbFpuTXViM0JsYmsxdlpHRnNRblJ1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWENKamJHbGphMXdpTENCMGIyZG5iR1ZOYjJSaGJDazdYRzV5WldaekxtTnNiM05sVFc5a1lXeENkRzR1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjSW1Oc2FXTnJYQ0lzSUhSdloyZHNaVTF2WkdGc0tUdGNibHh1Y21WbWN5NWlZV05yWkhKdmNDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2lZMnhwWTJ0Y0lpd2diRzluUW1GamEyUnliM0JEYkdsamF5azdYRzVjYm1aMWJtTjBhVzl1SUhSdloyZHNaVTF2WkdGc0tDa2dlMXh1WEhSeVpXWnpMbUpoWTJ0a2NtOXdMbU5zWVhOelRHbHpkQzUwYjJkbmJHVW9YQ0pwY3kxb2FXUmtaVzVjSWlrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUd4dlowSmhZMnRrY205d1EyeHBZMnNvS1NCN2ZWeHVJaXdpWTI5dWMzUWdkSEpwWjJkbGNpQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1hDSXVZblZ5WjJWeVhDSXBPeUF2THlCdmNpQjNhR0YwWlhabGNpQjBjbWxuWjJWeWN5QjBhR1VnZEc5bloyeGxYRzVqYjI1emRDQmxiR1Z0Wlc1MElEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loY0lpNXRaVzUxSUZ3aUtUdGNibU52Ym5OMElHSnZaSGtnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLRndpTG5CaFoyVXRhRzl0WlZ3aUtUdGNibHh1WTI5dWMyOXNaUzVzYjJjb2RISnBaMmRsY2lrN1hHNWNiblJ5YVdkblpYSXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGNJbU5zYVdOclhDSXNJR1oxYm1OMGFXOXVJQ2hsS1NCN1hHNWNkR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmx4MFpXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdWRHOW5aMnhsS0Z3aVlXTjBhWFpsWENJcE95QXZMeUJ2Y2lCM2FHRjBaWFpsY2lCNWIzVnlJR0ZqZEdsMlpTQmpiR0Z6Y3lCcGMxeHVYSFJpYjJSNUxtTnNZWE56VEdsemRDNTBiMmRuYkdVb1hDSnphV1JsWW1GeUxXbHpMVzl3Wlc1Y0lpazdJQzh2SUc5eUlIZG9ZWFJsZG1WeUlIbHZkWElnWVdOMGFYWmxJR05zWVhOeklHbHpYRzU5S1R0Y2JpSXNJbWx0Y0c5eWRDQk1ZWHA1VEc5aFpDQm1jbTl0SUNkMllXNXBiR3hoTFd4aGVubHNiMkZrSnp0Y2JtbHRjRzl5ZENCallXNVZjMlZYWldKd0lHWnliMjBnSnk0dUwyaGxiSEJsY25NdlkyRnVWWE5sVjJWaWNDYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJQ2dwSUQwK0lIdGNiaUFnYVdZZ0tHTmhibFZ6WlZkbFluQW9LU0E5UFQwZ1ptRnNjMlVwSUh0Y2JpQWdJQ0JqYjI1emRDQnNZWHA1UW1kSmRHVnRjeUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnk1c1lYcDVXMlJoZEdFdFltY3RabUZzYkdKaFkydGRKeWs3WEc1Y2JpQWdJQ0JzWVhwNVFtZEpkR1Z0Y3k1bWIzSkZZV05vS0NocGRHVnRLU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpkQ0J6Y21OQ1owWmhiR3hpWVdOcklEMGdhWFJsYlM1blpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdFltY3RabUZzYkdKaFkyc25LVHRjYmlBZ0lDQWdJR2wwWlcwdWMyVjBRWFIwY21saWRYUmxLQ2RrWVhSaExXSm5KeXdnYzNKalFtZEdZV3hzWW1GamF5azdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dGRXNTFjMlZrTFhaaGNuTmNiaUFnWTI5dWMzUWdiR0Y2ZVV4dllXUkpibk4wWVc1alpTQTlJRzVsZHlCTVlYcDVURzloWkNoN1hHNGdJQ0FnWld4bGJXVnVkSE5mYzJWc1pXTjBiM0k2SUNjdWJHRjZlU2NzWEc0Z0lIMHBPMXh1ZlR0Y2JpSmRmUT09In0=
